
Observer_Design_Pattern.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08003c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003c68  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d262  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9d  00000000  00000000  0002d302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0002f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001729c  00000000  00000000  00030058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a252  00000000  00000000  000472f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087381  00000000  00000000  00051546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d88c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000d891c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003944 	.word	0x08003944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003944 	.word	0x08003944

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <display_client_init>:
#include <stdio.h>
#include <stm32f4xx_hal.h>
#include <stm32f4xx.h>
#include "Display_client.h"
extern UART_HandleTypeDef huart2;
void display_client_init(display_client_t *const me) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	me->fn_handler = display_client_handlenewdata;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <display_client_init+0x1c>)
 8000584:	60da      	str	r2, [r3, #12]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	080005fd 	.word	0x080005fd

08000598 <display_client_create>:
display_client_t * display_client_create(void)
 {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	display_client_t *me = (display_client_t*) malloc(
 800059e:	2010      	movs	r0, #16
 80005a0:	f001 ff66 	bl	8002470 <malloc>
 80005a4:	4603      	mov	r3, r0
 80005a6:	607b      	str	r3, [r7, #4]
			sizeof(display_client_t));
	if (me == NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d104      	bne.n	80005b8 <display_client_create+0x20>
		printf("Yetersiz bellek alani\r\n");
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <display_client_create+0x30>)
 80005b0:	f002 f89e 	bl	80026f0 <puts>
		return NULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e003      	b.n	80005c0 <display_client_create+0x28>
	}
	display_client_init(me);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffdd 	bl	8000578 <display_client_init>
	return me;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	0800395c 	.word	0x0800395c

080005cc <logspecifieddata>:
void logspecifieddata(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	char *log500data="";
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <logspecifieddata+0x24>)
 80005d4:	607b      	str	r3, [r7, #4]
	sprintf(log500data,"gllog500");
 80005d6:	4907      	ldr	r1, [pc, #28]	; (80005f4 <logspecifieddata+0x28>)
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f002 f8e1 	bl	80027a0 <siprintf>
	printf("%s",log500data);
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <logspecifieddata+0x2c>)
 80005e2:	f001 ffff 	bl	80025e4 <iprintf>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	08003974 	.word	0x08003974
 80005f4:	08003978 	.word	0x08003978
 80005f8:	08003984 	.word	0x08003984

080005fc <display_client_handlenewdata>:

void display_client_handlenewdata(void *mydisplayclient,environmental_data_e data)
 {
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	4638      	mov	r0, r7
 8000606:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	((display_client_t*) mydisplayclient)->data = data;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	461c      	mov	r4, r3
 800060e:	463b      	mov	r3, r7
 8000610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	logspecifieddata();
 8000618:	f7ff ffd8 	bl	80005cc <logspecifieddata>
	//fertilizer_mixer_clientlog_handle(((fertilizer_mixer_client_t*) fertilizerclient)->data);
	//Process Data
		//Do something


}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}

08000624 <display_client_subscribe>:
void display_client_subscribe(display_client_t *const me,env_sensor_t *const server)
 {
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < MAX_CLIENT; i++) {
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e049      	b.n	80006c8 <display_client_subscribe+0xa4>
		if (server->clients[i].pobject == (void*) me) {
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	3202      	adds	r2, #2
 800063a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d045      	beq.n	80006d0 <display_client_subscribe+0xac>
			return;
		}
		if (server->clients[i].pobject == NULL) {
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	3202      	adds	r2, #2
 800064a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d137      	bne.n	80006c2 <display_client_subscribe+0x9e>
			server->n_client++;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	60da      	str	r2, [r3, #12]
			server->clients[i].pobject = (void*) me;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	3202      	adds	r2, #2
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			server->clients[i].fn_handler = me->fn_handler;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	6839      	ldr	r1, [r7, #0]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3302      	adds	r3, #2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	440b      	add	r3, r1
 8000676:	605a      	str	r2, [r3, #4]
			for (int j = i + 1; j < MAX_CLIENT; j++) {
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	e01c      	b.n	80006ba <display_client_subscribe+0x96>
				if ((server->clients[j].pobject) == me) {
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	3202      	adds	r2, #2
 8000686:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	d111      	bne.n	80006b4 <display_client_subscribe+0x90>
					server->clients[j].pobject = NULL;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	3202      	adds	r2, #2
 8000696:	2100      	movs	r1, #0
 8000698:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
					server->clients[j].fn_handler = NULL;
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	3302      	adds	r3, #2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
					server->n_client--;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	60da      	str	r2, [r3, #12]
			for (int j = i + 1; j < MAX_CLIENT; j++) {
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2b09      	cmp	r3, #9
 80006be:	dddf      	ble.n	8000680 <display_client_subscribe+0x5c>

				}
			}
			return;
 80006c0:	e007      	b.n	80006d2 <display_client_subscribe+0xae>
	for (int i = 0; i < MAX_CLIENT; i++) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b09      	cmp	r3, #9
 80006cc:	ddb2      	ble.n	8000634 <display_client_subscribe+0x10>
 80006ce:	e000      	b.n	80006d2 <display_client_subscribe+0xae>
			return;
 80006d0:	bf00      	nop
		}

	}

}
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <env_sensor_init>:
#include <stdio.h>
#include <stm32f4xx_hal.h>
#include <stm32f4xx.h>
extern UART_HandleTypeDef huart2;

static void env_sensor_init(env_sensor_t *const me) {
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_CLIENT; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e012      	b.n	8000710 <env_sensor_init+0x34>
		me->clients[i].fn_handler = NULL;
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3302      	adds	r3, #2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	4413      	add	r3, r2
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
		me->clients[i].pobject = NULL;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	3202      	adds	r2, #2
 80006fe:	2100      	movs	r1, #0
 8000700:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		me->n_client=0;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < MAX_CLIENT; i++) {
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b09      	cmp	r3, #9
 8000714:	dde9      	ble.n	80006ea <env_sensor_init+0xe>
	}

}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <env_sensor_create>:
env_sensor_t* env_sensor_create(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

	env_sensor_t *newclient = (env_sensor_t*) malloc(sizeof(env_sensor_t));
 800072a:	2060      	movs	r0, #96	; 0x60
 800072c:	f001 fea0 	bl	8002470 <malloc>
 8000730:	4603      	mov	r3, r0
 8000732:	607b      	str	r3, [r7, #4]
	if (newclient != NULL) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <env_sensor_create+0x1c>
		env_sensor_init(newclient);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffce 	bl	80006dc <env_sensor_init>
	}
	return newclient;
 8000740:	687b      	ldr	r3, [r7, #4]

}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <env_sensor_get_data>:
void env_sensor_get_data(env_sensor_t *const me) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	me->data.temperature = (rand() % 10);
 8000754:	f001 ffd4 	bl	8002700 <rand>
 8000758:	4601      	mov	r1, r0
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <env_sensor_get_data+0x5c>)
 800075c:	fb83 2301 	smull	r2, r3, r3, r1
 8000760:	109a      	asrs	r2, r3, #2
 8000762:	17cb      	asrs	r3, r1, #31
 8000764:	1ad2      	subs	r2, r2, r3
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	1aca      	subs	r2, r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
	me->data.humudity = (rand() % 200);
 8000774:	f001 ffc4 	bl	8002700 <rand>
 8000778:	4602      	mov	r2, r0
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <env_sensor_get_data+0x60>)
 800077c:	fb83 1302 	smull	r1, r3, r3, r2
 8000780:	1199      	asrs	r1, r3, #6
 8000782:	17d3      	asrs	r3, r2, #31
 8000784:	1acb      	subs	r3, r1, r3
 8000786:	21c8      	movs	r1, #200	; 0xc8
 8000788:	fb01 f303 	mul.w	r3, r1, r3
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	6053      	str	r3, [r2, #4]
	me->data.sprayed = true;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2201      	movs	r2, #1
 8000796:	721a      	strb	r2, [r3, #8]
	//Notify Client
	env_sensor_notify(me);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f809 	bl	80007b0 <env_sensor_notify>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	66666667 	.word	0x66666667
 80007ac:	51eb851f 	.word	0x51eb851f

080007b0 <env_sensor_notify>:
void env_sensor_notify(env_sensor_t *const me) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_CLIENT; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e01f      	b.n	80007fe <env_sensor_notify+0x4e>
		if (me->clients[i].pobject != NULL && me->clients[i].fn_handler != NULL) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	3202      	adds	r2, #2
 80007c4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d015      	beq.n	80007f8 <env_sensor_notify+0x48>
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3302      	adds	r3, #2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00d      	beq.n	80007f8 <env_sensor_notify+0x48>
			me->clients[i].fn_handler(me->clients[i].pobject, me->data);
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3302      	adds	r3, #2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4413      	add	r3, r2
 80007e6:	685c      	ldr	r4, [r3, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	3202      	adds	r2, #2
 80007ee:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f6:	47a0      	blx	r4
	for (int i = 0; i < MAX_CLIENT; i++) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b09      	cmp	r3, #9
 8000802:	dddc      	ble.n	80007be <env_sensor_notify+0xe>
		}
	}

}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bd90      	pop	{r4, r7, pc}
	...

08000810 <env_sensor_dumplist>:
void env_sensor_dumplist(env_sensor_t *const me) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	printf("Dumplist :  \t number of Clients: %d\n\r", me->n_client);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4619      	mov	r1, r3
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <env_sensor_dumplist+0x6c>)
 8000820:	f001 fee0 	bl	80025e4 <iprintf>

	for (int i = 0; i < MAX_CLIENT; i++) {
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e020      	b.n	800086c <env_sensor_dumplist+0x5c>
		if (me->clients[i].fn_handler != NULL && me->clients[i].pobject != NULL) {
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3302      	adds	r3, #2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	4413      	add	r3, r2
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d015      	beq.n	8000866 <env_sensor_dumplist+0x56>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	3202      	adds	r2, #2
 8000840:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00e      	beq.n	8000866 <env_sensor_dumplist+0x56>
			printf("\T POBJECT :%p \t fn_handler: %p\n\r",
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	3202      	adds	r2, #2
 800084e:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3302      	adds	r3, #2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	4413      	add	r3, r2
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	461a      	mov	r2, r3
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <env_sensor_dumplist+0x70>)
 8000862:	f001 febf 	bl	80025e4 <iprintf>
	for (int i = 0; i < MAX_CLIENT; i++) {
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3301      	adds	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b09      	cmp	r3, #9
 8000870:	dddb      	ble.n	800082a <env_sensor_dumplist+0x1a>
					me->clients[i].pobject, me->clients[i].fn_handler);
		}
	}

}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	080039a8 	.word	0x080039a8
 8000880:	080039d0 	.word	0x080039d0

08000884 <fertilizer_mixer_client_init>:
#include <stdio.h>
#include <stm32f4xx_hal.h>
#include <stm32f4xx.h>
extern UART_HandleTypeDef huart2;
char * fertilizer_loghandle="";
void fertilizer_mixer_client_init(fertilizer_mixer_client_t *const me) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	me->fn_handler = fertilizer_mixer_client_handlenewdata;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <fertilizer_mixer_client_init+0x1c>)
 8000890:	60da      	str	r2, [r3, #12]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	080008d9 	.word	0x080008d9

080008a4 <fertilizer_mixer_client_create>:
fertilizer_mixer_client_t* fertilizer_mixer_client_create(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	fertilizer_mixer_client_t *me = (fertilizer_mixer_client_t*) malloc(
 80008aa:	2010      	movs	r0, #16
 80008ac:	f001 fde0 	bl	8002470 <malloc>
 80008b0:	4603      	mov	r3, r0
 80008b2:	607b      	str	r3, [r7, #4]
			sizeof(fertilizer_mixer_client_t));
	if (me == NULL) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <fertilizer_mixer_client_create+0x20>
		printf("Yetersiz bellek alani\r\n");
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <fertilizer_mixer_client_create+0x30>)
 80008bc:	f001 ff18 	bl	80026f0 <puts>
		return NULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	e003      	b.n	80008cc <fertilizer_mixer_client_create+0x28>
	}
	fertilizer_mixer_client_init(me);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ffdd 	bl	8000884 <fertilizer_mixer_client_init>
	return me;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08003a18 	.word	0x08003a18

080008d8 <fertilizer_mixer_client_handlenewdata>:
void fertilizer_mixer_client_handlenewdata(void *fertilizerclient,
		environmental_data_e data) {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	4638      	mov	r0, r7
 80008e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
int a=12;
 80008e6:	230c      	movs	r3, #12
 80008e8:	61fb      	str	r3, [r7, #28]
int b=14;
 80008ea:	230e      	movs	r3, #14
 80008ec:	61bb      	str	r3, [r7, #24]
int c=15;
 80008ee:	230f      	movs	r3, #15
 80008f0:	617b      	str	r3, [r7, #20]
	((fertilizer_mixer_client_t*) fertilizerclient)->data = data;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	461c      	mov	r4, r3
 80008f6:	463b      	mov	r3, r7
 80008f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}


		printf(" Humudity:%d\r\n  Temperature :%d\r\n  Sprayed:%d\r\n",((fertilizer_mixer_client_t*) fertilizerclient)->data.humudity,
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6859      	ldr	r1, [r3, #4]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681a      	ldr	r2, [r3, #0]
			     ((fertilizer_mixer_client_t*) fertilizerclient)->data.temperature,
				 ((fertilizer_mixer_client_t*) fertilizerclient)->data.sprayed);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	7a1b      	ldrb	r3, [r3, #8]
		printf(" Humudity:%d\r\n  Temperature :%d\r\n  Sprayed:%d\r\n",((fertilizer_mixer_client_t*) fertilizerclient)->data.humudity,
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <fertilizer_mixer_client_handlenewdata+0x44>)
 800090e:	f001 fe69 	bl	80025e4 <iprintf>
	//fertilizer_mixer_clientlog_handle(((fertilizer_mixer_client_t*) fertilizerclient)->data);
	//Process Data
		//Do something


}
 8000912:	bf00      	nop
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	08003a30 	.word	0x08003a30

08000920 <fertilizer_mixer_client_subscribe>:
void fertilizer_mixer_client_subscribe(fertilizer_mixer_client_t *const me,
		env_sensor_t *const server) {
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < MAX_CLIENT; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e049      	b.n	80009c4 <fertilizer_mixer_client_subscribe+0xa4>
		if (server->clients[i].pobject == (void*) me) {
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	3202      	adds	r2, #2
 8000936:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d045      	beq.n	80009cc <fertilizer_mixer_client_subscribe+0xac>
			return;
		}
		if (server->clients[i].pobject == NULL) {
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	3202      	adds	r2, #2
 8000946:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d137      	bne.n	80009be <fertilizer_mixer_client_subscribe+0x9e>
			server->n_client++;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	60da      	str	r2, [r3, #12]
			server->clients[i].pobject = (void*) me;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	3202      	adds	r2, #2
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			server->clients[i].fn_handler = me->fn_handler;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3302      	adds	r3, #2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	605a      	str	r2, [r3, #4]
			for (int j = i + 1; j < MAX_CLIENT; j++) {
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3301      	adds	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	e01c      	b.n	80009b6 <fertilizer_mixer_client_subscribe+0x96>
				if ((server->clients[j].pobject) == me) {
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	3202      	adds	r2, #2
 8000982:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	d111      	bne.n	80009b0 <fertilizer_mixer_client_subscribe+0x90>
					server->clients[j].pobject = NULL;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	3202      	adds	r2, #2
 8000992:	2100      	movs	r1, #0
 8000994:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
					server->clients[j].fn_handler = NULL;
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3302      	adds	r3, #2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4413      	add	r3, r2
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
					server->n_client--;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	1e5a      	subs	r2, r3, #1
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	60da      	str	r2, [r3, #12]
			for (int j = i + 1; j < MAX_CLIENT; j++) {
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	2b09      	cmp	r3, #9
 80009ba:	dddf      	ble.n	800097c <fertilizer_mixer_client_subscribe+0x5c>

				}
			}
			return;
 80009bc:	e007      	b.n	80009ce <fertilizer_mixer_client_subscribe+0xae>
	for (int i = 0; i < MAX_CLIENT; i++) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b09      	cmp	r3, #9
 80009c8:	ddb2      	ble.n	8000930 <fertilizer_mixer_client_subscribe+0x10>
 80009ca:	e000      	b.n	80009ce <fertilizer_mixer_client_subscribe+0xae>
			return;
 80009cc:	bf00      	nop
		}

	}

}
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <fertilizer_mixer_client_unsubscribe>:
void fertilizer_mixer_client_unsubscribe(fertilizer_mixer_client_t *const me,
		env_sensor_t *const server) {
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < MAX_CLIENT; i++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	e01c      	b.n	8000a22 <fertilizer_mixer_client_unsubscribe+0x4a>
		if (server->clients[i].pobject == (void*) me) {
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	3202      	adds	r2, #2
 80009ee:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d111      	bne.n	8000a1c <fertilizer_mixer_client_unsubscribe+0x44>
			server->clients[i].pobject = NULL;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	3202      	adds	r2, #2
 80009fe:	2100      	movs	r1, #0
 8000a00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			server->n_client--;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	1e5a      	subs	r2, r3, #1
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	60da      	str	r2, [r3, #12]
			server->clients[i].fn_handler = NULL;
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3302      	adds	r3, #2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	4413      	add	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < MAX_CLIENT; i++) {
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b09      	cmp	r3, #9
 8000a26:	dddf      	ble.n	80009e8 <fertilizer_mixer_client_unsubscribe+0x10>
		}
	}

}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <__io_putchar>:

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar(int ch){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8000a40:	1d39      	adds	r1, r7, #4
 8000a42:	230a      	movs	r3, #10
 8000a44:	2201      	movs	r2, #1
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <__io_putchar+0x20>)
 8000a48:	f001 fa1f 	bl	8001e8a <HAL_UART_Transmit>
	return ch;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000098 	.word	0x20000098

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f000 fa87 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 f829 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 f8af 	bl	8000bcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a6e:	f000 f883 	bl	8000b78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  env_sensor_t * mysensorserver=env_sensor_create();
 8000a72:	f7ff fe57 	bl	8000724 <env_sensor_create>
 8000a76:	60f8      	str	r0, [r7, #12]
  fertilizer_mixer_client_t * fertilizer_device=fertilizer_mixer_client_create();
 8000a78:	f7ff ff14 	bl	80008a4 <fertilizer_mixer_client_create>
 8000a7c:	60b8      	str	r0, [r7, #8]
  fertilizer_mixer_client_subscribe(fertilizer_device, mysensorserver);
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	68b8      	ldr	r0, [r7, #8]
 8000a82:	f7ff ff4d 	bl	8000920 <fertilizer_mixer_client_subscribe>
  display_client_t *mydisplayclient=display_client_create();
 8000a86:	f7ff fd87 	bl	8000598 <display_client_create>
 8000a8a:	6078      	str	r0, [r7, #4]
  display_client_subscribe(mydisplayclient, mysensorserver);
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fdc8 	bl	8000624 <display_client_subscribe>
  env_sensor_get_data(mysensorserver);
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fe59 	bl	800074c <env_sensor_get_data>
  env_sensor_get_data(mysensorserver);
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff fe56 	bl	800074c <env_sensor_get_data>
  env_sensor_dumplist(mysensorserver);
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff feb5 	bl	8000810 <env_sensor_dumplist>
  fertilizer_mixer_client_unsubscribe(fertilizer_device, mysensorserver);
 8000aa6:	68f9      	ldr	r1, [r7, #12]
 8000aa8:	68b8      	ldr	r0, [r7, #8]
 8000aaa:	f7ff ff95 	bl	80009d8 <fertilizer_mixer_client_unsubscribe>
env_sensor_get_data(mysensorserver);
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fe4c 	bl	800074c <env_sensor_get_data>
env_sensor_dumplist(mysensorserver);
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f7ff feab 	bl	8000810 <env_sensor_dumplist>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <main+0x5e>

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	; 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2230      	movs	r2, #48	; 0x30
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fcd8 	bl	8002480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <SystemClock_Config+0xb4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <SystemClock_Config+0xb4>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <SystemClock_Config+0xb4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <SystemClock_Config+0xb8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <SystemClock_Config+0xb8>)
 8000b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <SystemClock_Config+0xb8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2310      	movs	r3, #16
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 0320 	add.w	r3, r7, #32
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fd17 	bl	8001560 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b38:	f000 f87a 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 ff7a 	bl	8001a50 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b62:	f000 f865 	bl	8000c30 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_USART2_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	f001 f91e 	bl	8001df0 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f839 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000098 	.word	0x20000098
 8000bc8:	40004400 	.word	0x40004400

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_GPIO_Init+0x5c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <MX_GPIO_Init+0x5c>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_GPIO_Init+0x5c>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2120      	movs	r1, #32
 8000c00:	480a      	ldr	r0, [pc, #40]	; (8000c2c <MX_GPIO_Init+0x60>)
 8000c02:	f000 fc93 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c06:	2320      	movs	r3, #32
 8000c08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_GPIO_Init+0x60>)
 8000c1c:	f000 fb02 	bl	8001224 <HAL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12b      	bne.n	8000d06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_UART_MspInit+0x8c>)
 8000d02:	f000 fa8f 	bl	8001224 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f956 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_kill>:

int _kill(int pid, int sig)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d8a:	f001 fb47 	bl	800241c <__errno>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2216      	movs	r2, #22
 8000d92:	601a      	str	r2, [r3, #0]
	return -1;
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_exit>:

void _exit (int status)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ffe7 	bl	8000d80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000db2:	e7fe      	b.n	8000db2 <_exit+0x12>

08000db4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
	}

return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fe15 	bl	8000a38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
	}
	return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f001 faac 	bl	800241c <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20020000 	.word	0x20020000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	200000f0 	.word	0x200000f0

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	; (8000f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f4a:	f7ff ffd7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f001 fa6b 	bl	8002428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fd83 	bl	8000a5c <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f64:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8000f68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f6c:	200000f0 	.word	0x200000f0

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f90d 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fe48 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f917 	bl	800120a <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f8ed 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	200000dc 	.word	0x200000dc

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000dc 	.word	0x200000dc

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff47 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff5c 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb0 	bl	8001178 <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	e159      	b.n	80014f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8148 	bne.w	80014ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d005      	beq.n	8001276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	2b02      	cmp	r3, #2
 8001274:	d130      	bne.n	80012d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d017      	beq.n	8001314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d123      	bne.n	8001368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	69b9      	ldr	r1, [r7, #24]
 8001364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0203 	and.w	r2, r3, #3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80a2 	beq.w	80014ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b57      	ldr	r3, [pc, #348]	; (800150c <HAL_GPIO_Init+0x2e8>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a56      	ldr	r2, [pc, #344]	; (800150c <HAL_GPIO_Init+0x2e8>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b54      	ldr	r3, [pc, #336]	; (800150c <HAL_GPIO_Init+0x2e8>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c6:	4a52      	ldr	r2, [pc, #328]	; (8001510 <HAL_GPIO_Init+0x2ec>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a49      	ldr	r2, [pc, #292]	; (8001514 <HAL_GPIO_Init+0x2f0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d019      	beq.n	8001426 <HAL_GPIO_Init+0x202>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x2f4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x1fe>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_GPIO_Init+0x2f8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x1fa>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a46      	ldr	r2, [pc, #280]	; (8001520 <HAL_GPIO_Init+0x2fc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x1f6>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a45      	ldr	r2, [pc, #276]	; (8001524 <HAL_GPIO_Init+0x300>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x1f2>
 8001412:	2304      	movs	r3, #4
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x204>
 8001416:	2307      	movs	r3, #7
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x204>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x204>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x204>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x204>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001438:	4935      	ldr	r1, [pc, #212]	; (8001510 <HAL_GPIO_Init+0x2ec>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_GPIO_Init+0x304>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <HAL_GPIO_Init+0x304>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_GPIO_Init+0x304>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001494:	4a24      	ldr	r2, [pc, #144]	; (8001528 <HAL_GPIO_Init+0x304>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_GPIO_Init+0x304>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x304>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_GPIO_Init+0x304>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_GPIO_Init+0x304>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f aea2 	bls.w	8001240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e264      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d075      	beq.n	800166a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157e:	4ba3      	ldr	r3, [pc, #652]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b04      	cmp	r3, #4
 8001588:	d00c      	beq.n	80015a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158a:	4ba0      	ldr	r3, [pc, #640]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001592:	2b08      	cmp	r3, #8
 8001594:	d112      	bne.n	80015bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001596:	4b9d      	ldr	r3, [pc, #628]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a2:	d10b      	bne.n	80015bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	4b99      	ldr	r3, [pc, #612]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d05b      	beq.n	8001668 <HAL_RCC_OscConfig+0x108>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d157      	bne.n	8001668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e23f      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c4:	d106      	bne.n	80015d4 <HAL_RCC_OscConfig+0x74>
 80015c6:	4b91      	ldr	r3, [pc, #580]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a90      	ldr	r2, [pc, #576]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0xb0>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x98>
 80015de:	4b8b      	ldr	r3, [pc, #556]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a8a      	ldr	r2, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a87      	ldr	r2, [pc, #540]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0xb0>
 80015f8:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a83      	ldr	r2, [pc, #524]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a80      	ldr	r2, [pc, #512]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fd12 	bl	8001040 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fd0e 	bl	8001040 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e204      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0xc0>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fcfe 	bl	8001040 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fcfa 	bl	8001040 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1f0      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	4b6c      	ldr	r3, [pc, #432]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0xe8>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d063      	beq.n	800173e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001676:	4b65      	ldr	r3, [pc, #404]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168a:	2b08      	cmp	r3, #8
 800168c:	d11c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d116      	bne.n	80016c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_RCC_OscConfig+0x152>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1c4      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4952      	ldr	r1, [pc, #328]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	e03a      	b.n	800173e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d0:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <HAL_RCC_OscConfig+0x2b0>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fcb3 	bl	8001040 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fcaf 	bl	8001040 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1a5      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b46      	ldr	r3, [pc, #280]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4940      	ldr	r1, [pc, #256]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_OscConfig+0x2b0>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fc92 	bl	8001040 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fc8e 	bl	8001040 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e184      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d030      	beq.n	80017ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d016      	beq.n	8001780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_RCC_OscConfig+0x2b4>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fc72 	bl	8001040 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fc6e 	bl	8001040 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e164      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 8001774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x200>
 800177e:	e015      	b.n	80017ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_OscConfig+0x2b4>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fc5b 	bl	8001040 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178e:	f7ff fc57 	bl	8001040 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e14d      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a0 	beq.w	80018fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e6:	2301      	movs	r3, #1
 80017e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x2b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d121      	bne.n	800183a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_RCC_OscConfig+0x2b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_RCC_OscConfig+0x2b8>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001802:	f7ff fc1d 	bl	8001040 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	e011      	b.n	800182e <HAL_RCC_OscConfig+0x2ce>
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	42470000 	.word	0x42470000
 8001814:	42470e80 	.word	0x42470e80
 8001818:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181c:	f7ff fc10 	bl	8001040 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e106      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <HAL_RCC_OscConfig+0x4e4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d106      	bne.n	8001850 <HAL_RCC_OscConfig+0x2f0>
 8001842:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	4a80      	ldr	r2, [pc, #512]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6713      	str	r3, [r2, #112]	; 0x70
 800184e:	e01c      	b.n	800188a <HAL_RCC_OscConfig+0x32a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d10c      	bne.n	8001872 <HAL_RCC_OscConfig+0x312>
 8001858:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a7a      	ldr	r2, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	4a77      	ldr	r2, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6713      	str	r3, [r2, #112]	; 0x70
 8001870:	e00b      	b.n	800188a <HAL_RCC_OscConfig+0x32a>
 8001872:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a74      	ldr	r2, [pc, #464]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a71      	ldr	r2, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d015      	beq.n	80018be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fbd5 	bl	8001040 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fbd1 	bl	8001040 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0c5      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ee      	beq.n	800189a <HAL_RCC_OscConfig+0x33a>
 80018bc:	e014      	b.n	80018e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff fbbf 	bl	8001040 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff fbbb 	bl	8001040 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e0af      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	4b5a      	ldr	r3, [pc, #360]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ee      	bne.n	80018c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d105      	bne.n	80018fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ee:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a55      	ldr	r2, [pc, #340]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 80018f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 809b 	beq.w	8001a3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d05c      	beq.n	80019ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d141      	bne.n	800199c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001918:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <HAL_RCC_OscConfig+0x4ec>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff fb8f 	bl	8001040 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff fb8b 	bl	8001040 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e081      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69da      	ldr	r2, [r3, #28]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	019b      	lsls	r3, r3, #6
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	061b      	lsls	r3, r3, #24
 8001968:	4937      	ldr	r1, [pc, #220]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x4ec>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fb64 	bl	8001040 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fb60 	bl	8001040 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e056      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x41c>
 800199a:	e04e      	b.n	8001a3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_RCC_OscConfig+0x4ec>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb4d 	bl	8001040 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fb49 	bl	8001040 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e03f      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x44a>
 80019c8:	e037      	b.n	8001a3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e032      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d028      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d121      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d11a      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d111      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40007000 	.word	0x40007000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	42470060 	.word	0x42470060

08001a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0cc      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d90c      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	494d      	ldr	r1, [pc, #308]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d044      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d119      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e07f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e067      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4934      	ldr	r1, [pc, #208]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff fa7e 	bl	8001040 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff fa7a 	bl	8001040 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e04f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d20c      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e032      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4916      	ldr	r1, [pc, #88]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	490e      	ldr	r1, [pc, #56]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd6:	f000 f821 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	490a      	ldr	r1, [pc, #40]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f9de 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08003a84 	.word	0x08003a84
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c22:	2100      	movs	r1, #0
 8001c24:	6079      	str	r1, [r7, #4]
 8001c26:	2100      	movs	r1, #0
 8001c28:	60f9      	str	r1, [r7, #12]
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c2e:	2100      	movs	r1, #0
 8001c30:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c32:	4952      	ldr	r1, [pc, #328]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c34:	6889      	ldr	r1, [r1, #8]
 8001c36:	f001 010c 	and.w	r1, r1, #12
 8001c3a:	2908      	cmp	r1, #8
 8001c3c:	d00d      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x3e>
 8001c3e:	2908      	cmp	r1, #8
 8001c40:	f200 8094 	bhi.w	8001d6c <HAL_RCC_GetSysClockFreq+0x150>
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x32>
 8001c48:	2904      	cmp	r1, #4
 8001c4a:	d003      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x38>
 8001c4c:	e08e      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c50:	60bb      	str	r3, [r7, #8]
       break;
 8001c52:	e08e      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c56:	60bb      	str	r3, [r7, #8]
      break;
 8001c58:	e08b      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c5a:	4948      	ldr	r1, [pc, #288]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c5c:	6849      	ldr	r1, [r1, #4]
 8001c5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001c62:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c64:	4945      	ldr	r1, [pc, #276]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c66:	6849      	ldr	r1, [r1, #4]
 8001c68:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001c6c:	2900      	cmp	r1, #0
 8001c6e:	d024      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c70:	4942      	ldr	r1, [pc, #264]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c72:	6849      	ldr	r1, [r1, #4]
 8001c74:	0989      	lsrs	r1, r1, #6
 8001c76:	4608      	mov	r0, r1
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c80:	f04f 0500 	mov.w	r5, #0
 8001c84:	ea00 0204 	and.w	r2, r0, r4
 8001c88:	ea01 0305 	and.w	r3, r1, r5
 8001c8c:	493d      	ldr	r1, [pc, #244]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c8e:	fb01 f003 	mul.w	r0, r1, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	fb01 f102 	mul.w	r1, r1, r2
 8001c98:	1844      	adds	r4, r0, r1
 8001c9a:	493a      	ldr	r1, [pc, #232]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c9c:	fba2 0101 	umull	r0, r1, r2, r1
 8001ca0:	1863      	adds	r3, r4, r1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	f7fe fae8 	bl	8000280 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e04a      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	ea02 0400 	and.w	r4, r2, r0
 8001cd2:	ea03 0501 	and.w	r5, r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	014b      	lsls	r3, r1, #5
 8001ce4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ce8:	0142      	lsls	r2, r0, #5
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	1b00      	subs	r0, r0, r4
 8001cf0:	eb61 0105 	sbc.w	r1, r1, r5
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	018b      	lsls	r3, r1, #6
 8001cfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d02:	0182      	lsls	r2, r0, #6
 8001d04:	1a12      	subs	r2, r2, r0
 8001d06:	eb63 0301 	sbc.w	r3, r3, r1
 8001d0a:	f04f 0000 	mov.w	r0, #0
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	00d9      	lsls	r1, r3, #3
 8001d14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d18:	00d0      	lsls	r0, r2, #3
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	1912      	adds	r2, r2, r4
 8001d20:	eb45 0303 	adc.w	r3, r5, r3
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0299      	lsls	r1, r3, #10
 8001d2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d32:	0290      	lsls	r0, r2, #10
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe fa9c 	bl	8000280 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	60bb      	str	r3, [r7, #8]
      break;
 8001d6a:	e002      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d6e:	60bb      	str	r3, [r7, #8]
      break;
 8001d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d72:	68bb      	ldr	r3, [r7, #8]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	017d7840 	.word	0x017d7840

08001d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08003a94 	.word	0x08003a94

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffdc 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0b5b      	lsrs	r3, r3, #13
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	08003a94 	.word	0x08003a94

08001df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e03f      	b.n	8001e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe ff38 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f929 	bl	800208c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b08a      	sub	sp, #40	; 0x28
 8001e8e:	af02      	add	r7, sp, #8
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d17c      	bne.n	8001fa4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_UART_Transmit+0x2c>
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e075      	b.n	8001fa6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_UART_Transmit+0x3e>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e06e      	b.n	8001fa6 <HAL_UART_Transmit+0x11c>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2221      	movs	r2, #33	; 0x21
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ede:	f7ff f8af 	bl	8001040 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	88fa      	ldrh	r2, [r7, #6]
 8001ee8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef8:	d108      	bne.n	8001f0c <HAL_UART_Transmit+0x82>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e003      	b.n	8001f14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f1c:	e02a      	b.n	8001f74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f840 	bl	8001fae <UART_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e036      	b.n	8001fa6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3302      	adds	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	e007      	b.n	8001f66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	3301      	adds	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1cf      	bne.n	8001f1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f810 	bl	8001fae <UART_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e006      	b.n	8001fa6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b090      	sub	sp, #64	; 0x40
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fbe:	e050      	b.n	8002062 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d04c      	beq.n	8002062 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0x30>
 8001fce:	f7ff f837 	bl	8001040 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d241      	bcs.n	8002062 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	e853 3f00 	ldrex	r3, [r3]
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ffe:	637a      	str	r2, [r7, #52]	; 0x34
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002006:	e841 2300 	strex	r3, r2, [r1]
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e5      	bne.n	8001fde <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3314      	adds	r3, #20
 8002018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	e853 3f00 	ldrex	r3, [r3]
 8002020:	613b      	str	r3, [r7, #16]
   return(result);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3314      	adds	r3, #20
 8002030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002032:	623a      	str	r2, [r7, #32]
 8002034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002036:	69f9      	ldr	r1, [r7, #28]
 8002038:	6a3a      	ldr	r2, [r7, #32]
 800203a:	e841 2300 	strex	r3, r2, [r1]
 800203e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e5      	bne.n	8002012 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e00f      	b.n	8002082 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4013      	ands	r3, r2
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	429a      	cmp	r2, r3
 800207e:	d09f      	beq.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3740      	adds	r7, #64	; 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	b09f      	sub	sp, #124	; 0x7c
 8002092:	af00      	add	r7, sp, #0
 8002094:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a2:	68d9      	ldr	r1, [r3, #12]
 80020a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	ea40 0301 	orr.w	r3, r0, r1
 80020ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	431a      	orrs	r2, r3
 80020be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020d0:	f021 010c 	bic.w	r1, r1, #12
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020da:	430b      	orrs	r3, r1
 80020dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ea:	6999      	ldr	r1, [r3, #24]
 80020ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	ea40 0301 	orr.w	r3, r0, r1
 80020f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4bc5      	ldr	r3, [pc, #788]	; (8002410 <UART_SetConfig+0x384>)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d004      	beq.n	800210a <UART_SetConfig+0x7e>
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4bc3      	ldr	r3, [pc, #780]	; (8002414 <UART_SetConfig+0x388>)
 8002106:	429a      	cmp	r2, r3
 8002108:	d103      	bne.n	8002112 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800210a:	f7ff fe5d 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 800210e:	6778      	str	r0, [r7, #116]	; 0x74
 8002110:	e002      	b.n	8002118 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002112:	f7ff fe45 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002116:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002120:	f040 80b6 	bne.w	8002290 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002126:	461c      	mov	r4, r3
 8002128:	f04f 0500 	mov.w	r5, #0
 800212c:	4622      	mov	r2, r4
 800212e:	462b      	mov	r3, r5
 8002130:	1891      	adds	r1, r2, r2
 8002132:	6439      	str	r1, [r7, #64]	; 0x40
 8002134:	415b      	adcs	r3, r3
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
 8002138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800213c:	1912      	adds	r2, r2, r4
 800213e:	eb45 0303 	adc.w	r3, r5, r3
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	00d9      	lsls	r1, r3, #3
 800214c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002150:	00d0      	lsls	r0, r2, #3
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	1911      	adds	r1, r2, r4
 8002158:	6639      	str	r1, [r7, #96]	; 0x60
 800215a:	416b      	adcs	r3, r5
 800215c:	667b      	str	r3, [r7, #100]	; 0x64
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	461a      	mov	r2, r3
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	1891      	adds	r1, r2, r2
 800216a:	63b9      	str	r1, [r7, #56]	; 0x38
 800216c:	415b      	adcs	r3, r3
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002174:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002178:	f7fe f882 	bl	8000280 <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4ba5      	ldr	r3, [pc, #660]	; (8002418 <UART_SetConfig+0x38c>)
 8002182:	fba3 2302 	umull	r2, r3, r3, r2
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	011e      	lsls	r6, r3, #4
 800218a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218c:	461c      	mov	r4, r3
 800218e:	f04f 0500 	mov.w	r5, #0
 8002192:	4622      	mov	r2, r4
 8002194:	462b      	mov	r3, r5
 8002196:	1891      	adds	r1, r2, r2
 8002198:	6339      	str	r1, [r7, #48]	; 0x30
 800219a:	415b      	adcs	r3, r3
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
 800219e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021a2:	1912      	adds	r2, r2, r4
 80021a4:	eb45 0303 	adc.w	r3, r5, r3
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	00d9      	lsls	r1, r3, #3
 80021b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021b6:	00d0      	lsls	r0, r2, #3
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	1911      	adds	r1, r2, r4
 80021be:	65b9      	str	r1, [r7, #88]	; 0x58
 80021c0:	416b      	adcs	r3, r5
 80021c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	1891      	adds	r1, r2, r2
 80021d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80021d2:	415b      	adcs	r3, r3
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80021de:	f7fe f84f 	bl	8000280 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <UART_SetConfig+0x38c>)
 80021e8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	2164      	movs	r1, #100	; 0x64
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	3332      	adds	r3, #50	; 0x32
 80021fa:	4a87      	ldr	r2, [pc, #540]	; (8002418 <UART_SetConfig+0x38c>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002208:	441e      	add	r6, r3
 800220a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220c:	4618      	mov	r0, r3
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	1894      	adds	r4, r2, r2
 8002218:	623c      	str	r4, [r7, #32]
 800221a:	415b      	adcs	r3, r3
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002222:	1812      	adds	r2, r2, r0
 8002224:	eb41 0303 	adc.w	r3, r1, r3
 8002228:	f04f 0400 	mov.w	r4, #0
 800222c:	f04f 0500 	mov.w	r5, #0
 8002230:	00dd      	lsls	r5, r3, #3
 8002232:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002236:	00d4      	lsls	r4, r2, #3
 8002238:	4622      	mov	r2, r4
 800223a:	462b      	mov	r3, r5
 800223c:	1814      	adds	r4, r2, r0
 800223e:	653c      	str	r4, [r7, #80]	; 0x50
 8002240:	414b      	adcs	r3, r1
 8002242:	657b      	str	r3, [r7, #84]	; 0x54
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	461a      	mov	r2, r3
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	1891      	adds	r1, r2, r2
 8002250:	61b9      	str	r1, [r7, #24]
 8002252:	415b      	adcs	r3, r3
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800225a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800225e:	f7fe f80f 	bl	8000280 <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <UART_SetConfig+0x38c>)
 8002268:	fba3 1302 	umull	r1, r3, r3, r2
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	2164      	movs	r1, #100	; 0x64
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	3332      	adds	r3, #50	; 0x32
 800227a:	4a67      	ldr	r2, [pc, #412]	; (8002418 <UART_SetConfig+0x38c>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4432      	add	r2, r6
 800228c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800228e:	e0b9      	b.n	8002404 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002292:	461c      	mov	r4, r3
 8002294:	f04f 0500 	mov.w	r5, #0
 8002298:	4622      	mov	r2, r4
 800229a:	462b      	mov	r3, r5
 800229c:	1891      	adds	r1, r2, r2
 800229e:	6139      	str	r1, [r7, #16]
 80022a0:	415b      	adcs	r3, r3
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022a8:	1912      	adds	r2, r2, r4
 80022aa:	eb45 0303 	adc.w	r3, r5, r3
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	00d9      	lsls	r1, r3, #3
 80022b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022bc:	00d0      	lsls	r0, r2, #3
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	eb12 0804 	adds.w	r8, r2, r4
 80022c6:	eb43 0905 	adc.w	r9, r3, r5
 80022ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f04f 0100 	mov.w	r1, #0
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	008b      	lsls	r3, r1, #2
 80022de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022e2:	0082      	lsls	r2, r0, #2
 80022e4:	4640      	mov	r0, r8
 80022e6:	4649      	mov	r1, r9
 80022e8:	f7fd ffca 	bl	8000280 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4b49      	ldr	r3, [pc, #292]	; (8002418 <UART_SetConfig+0x38c>)
 80022f2:	fba3 2302 	umull	r2, r3, r3, r2
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	011e      	lsls	r6, r3, #4
 80022fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022fc:	4618      	mov	r0, r3
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	1894      	adds	r4, r2, r2
 8002308:	60bc      	str	r4, [r7, #8]
 800230a:	415b      	adcs	r3, r3
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002312:	1812      	adds	r2, r2, r0
 8002314:	eb41 0303 	adc.w	r3, r1, r3
 8002318:	f04f 0400 	mov.w	r4, #0
 800231c:	f04f 0500 	mov.w	r5, #0
 8002320:	00dd      	lsls	r5, r3, #3
 8002322:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002326:	00d4      	lsls	r4, r2, #3
 8002328:	4622      	mov	r2, r4
 800232a:	462b      	mov	r3, r5
 800232c:	1814      	adds	r4, r2, r0
 800232e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002330:	414b      	adcs	r3, r1
 8002332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	008b      	lsls	r3, r1, #2
 8002348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800234c:	0082      	lsls	r2, r0, #2
 800234e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002352:	f7fd ff95 	bl	8000280 <__aeabi_uldivmod>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <UART_SetConfig+0x38c>)
 800235c:	fba3 1302 	umull	r1, r3, r3, r2
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	2164      	movs	r1, #100	; 0x64
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	3332      	adds	r3, #50	; 0x32
 800236e:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <UART_SetConfig+0x38c>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237a:	441e      	add	r6, r3
 800237c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237e:	4618      	mov	r0, r3
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	1894      	adds	r4, r2, r2
 800238a:	603c      	str	r4, [r7, #0]
 800238c:	415b      	adcs	r3, r3
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002394:	1812      	adds	r2, r2, r0
 8002396:	eb41 0303 	adc.w	r3, r1, r3
 800239a:	f04f 0400 	mov.w	r4, #0
 800239e:	f04f 0500 	mov.w	r5, #0
 80023a2:	00dd      	lsls	r5, r3, #3
 80023a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023a8:	00d4      	lsls	r4, r2, #3
 80023aa:	4622      	mov	r2, r4
 80023ac:	462b      	mov	r3, r5
 80023ae:	eb12 0a00 	adds.w	sl, r2, r0
 80023b2:	eb43 0b01 	adc.w	fp, r3, r1
 80023b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	008b      	lsls	r3, r1, #2
 80023ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023ce:	0082      	lsls	r2, r0, #2
 80023d0:	4650      	mov	r0, sl
 80023d2:	4659      	mov	r1, fp
 80023d4:	f7fd ff54 	bl	8000280 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <UART_SetConfig+0x38c>)
 80023de:	fba3 1302 	umull	r1, r3, r3, r2
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2164      	movs	r1, #100	; 0x64
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	3332      	adds	r3, #50	; 0x32
 80023f0:	4a09      	ldr	r2, [pc, #36]	; (8002418 <UART_SetConfig+0x38c>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4432      	add	r2, r6
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	377c      	adds	r7, #124	; 0x7c
 8002408:	46bd      	mov	sp, r7
 800240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240e:	bf00      	nop
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	51eb851f 	.word	0x51eb851f

0800241c <__errno>:
 800241c:	4b01      	ldr	r3, [pc, #4]	; (8002424 <__errno+0x8>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000000c 	.word	0x2000000c

08002428 <__libc_init_array>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	4d0d      	ldr	r5, [pc, #52]	; (8002460 <__libc_init_array+0x38>)
 800242c:	4c0d      	ldr	r4, [pc, #52]	; (8002464 <__libc_init_array+0x3c>)
 800242e:	1b64      	subs	r4, r4, r5
 8002430:	10a4      	asrs	r4, r4, #2
 8002432:	2600      	movs	r6, #0
 8002434:	42a6      	cmp	r6, r4
 8002436:	d109      	bne.n	800244c <__libc_init_array+0x24>
 8002438:	4d0b      	ldr	r5, [pc, #44]	; (8002468 <__libc_init_array+0x40>)
 800243a:	4c0c      	ldr	r4, [pc, #48]	; (800246c <__libc_init_array+0x44>)
 800243c:	f001 fa82 	bl	8003944 <_init>
 8002440:	1b64      	subs	r4, r4, r5
 8002442:	10a4      	asrs	r4, r4, #2
 8002444:	2600      	movs	r6, #0
 8002446:	42a6      	cmp	r6, r4
 8002448:	d105      	bne.n	8002456 <__libc_init_array+0x2e>
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002450:	4798      	blx	r3
 8002452:	3601      	adds	r6, #1
 8002454:	e7ee      	b.n	8002434 <__libc_init_array+0xc>
 8002456:	f855 3b04 	ldr.w	r3, [r5], #4
 800245a:	4798      	blx	r3
 800245c:	3601      	adds	r6, #1
 800245e:	e7f2      	b.n	8002446 <__libc_init_array+0x1e>
 8002460:	08003bf0 	.word	0x08003bf0
 8002464:	08003bf0 	.word	0x08003bf0
 8002468:	08003bf0 	.word	0x08003bf0
 800246c:	08003bf4 	.word	0x08003bf4

08002470 <malloc>:
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <malloc+0xc>)
 8002472:	4601      	mov	r1, r0
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	f000 b85b 	b.w	8002530 <_malloc_r>
 800247a:	bf00      	nop
 800247c:	2000000c 	.word	0x2000000c

08002480 <memset>:
 8002480:	4402      	add	r2, r0
 8002482:	4603      	mov	r3, r0
 8002484:	4293      	cmp	r3, r2
 8002486:	d100      	bne.n	800248a <memset+0xa>
 8002488:	4770      	bx	lr
 800248a:	f803 1b01 	strb.w	r1, [r3], #1
 800248e:	e7f9      	b.n	8002484 <memset+0x4>

08002490 <_free_r>:
 8002490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002492:	2900      	cmp	r1, #0
 8002494:	d048      	beq.n	8002528 <_free_r+0x98>
 8002496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800249a:	9001      	str	r0, [sp, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f1a1 0404 	sub.w	r4, r1, #4
 80024a2:	bfb8      	it	lt
 80024a4:	18e4      	addlt	r4, r4, r3
 80024a6:	f000 fca9 	bl	8002dfc <__malloc_lock>
 80024aa:	4a20      	ldr	r2, [pc, #128]	; (800252c <_free_r+0x9c>)
 80024ac:	9801      	ldr	r0, [sp, #4]
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	4615      	mov	r5, r2
 80024b2:	b933      	cbnz	r3, 80024c2 <_free_r+0x32>
 80024b4:	6063      	str	r3, [r4, #4]
 80024b6:	6014      	str	r4, [r2, #0]
 80024b8:	b003      	add	sp, #12
 80024ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024be:	f000 bca3 	b.w	8002e08 <__malloc_unlock>
 80024c2:	42a3      	cmp	r3, r4
 80024c4:	d90b      	bls.n	80024de <_free_r+0x4e>
 80024c6:	6821      	ldr	r1, [r4, #0]
 80024c8:	1862      	adds	r2, r4, r1
 80024ca:	4293      	cmp	r3, r2
 80024cc:	bf04      	itt	eq
 80024ce:	681a      	ldreq	r2, [r3, #0]
 80024d0:	685b      	ldreq	r3, [r3, #4]
 80024d2:	6063      	str	r3, [r4, #4]
 80024d4:	bf04      	itt	eq
 80024d6:	1852      	addeq	r2, r2, r1
 80024d8:	6022      	streq	r2, [r4, #0]
 80024da:	602c      	str	r4, [r5, #0]
 80024dc:	e7ec      	b.n	80024b8 <_free_r+0x28>
 80024de:	461a      	mov	r2, r3
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	b10b      	cbz	r3, 80024e8 <_free_r+0x58>
 80024e4:	42a3      	cmp	r3, r4
 80024e6:	d9fa      	bls.n	80024de <_free_r+0x4e>
 80024e8:	6811      	ldr	r1, [r2, #0]
 80024ea:	1855      	adds	r5, r2, r1
 80024ec:	42a5      	cmp	r5, r4
 80024ee:	d10b      	bne.n	8002508 <_free_r+0x78>
 80024f0:	6824      	ldr	r4, [r4, #0]
 80024f2:	4421      	add	r1, r4
 80024f4:	1854      	adds	r4, r2, r1
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	6011      	str	r1, [r2, #0]
 80024fa:	d1dd      	bne.n	80024b8 <_free_r+0x28>
 80024fc:	681c      	ldr	r4, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	6053      	str	r3, [r2, #4]
 8002502:	4421      	add	r1, r4
 8002504:	6011      	str	r1, [r2, #0]
 8002506:	e7d7      	b.n	80024b8 <_free_r+0x28>
 8002508:	d902      	bls.n	8002510 <_free_r+0x80>
 800250a:	230c      	movs	r3, #12
 800250c:	6003      	str	r3, [r0, #0]
 800250e:	e7d3      	b.n	80024b8 <_free_r+0x28>
 8002510:	6825      	ldr	r5, [r4, #0]
 8002512:	1961      	adds	r1, r4, r5
 8002514:	428b      	cmp	r3, r1
 8002516:	bf04      	itt	eq
 8002518:	6819      	ldreq	r1, [r3, #0]
 800251a:	685b      	ldreq	r3, [r3, #4]
 800251c:	6063      	str	r3, [r4, #4]
 800251e:	bf04      	itt	eq
 8002520:	1949      	addeq	r1, r1, r5
 8002522:	6021      	streq	r1, [r4, #0]
 8002524:	6054      	str	r4, [r2, #4]
 8002526:	e7c7      	b.n	80024b8 <_free_r+0x28>
 8002528:	b003      	add	sp, #12
 800252a:	bd30      	pop	{r4, r5, pc}
 800252c:	20000090 	.word	0x20000090

08002530 <_malloc_r>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	1ccd      	adds	r5, r1, #3
 8002534:	f025 0503 	bic.w	r5, r5, #3
 8002538:	3508      	adds	r5, #8
 800253a:	2d0c      	cmp	r5, #12
 800253c:	bf38      	it	cc
 800253e:	250c      	movcc	r5, #12
 8002540:	2d00      	cmp	r5, #0
 8002542:	4606      	mov	r6, r0
 8002544:	db01      	blt.n	800254a <_malloc_r+0x1a>
 8002546:	42a9      	cmp	r1, r5
 8002548:	d903      	bls.n	8002552 <_malloc_r+0x22>
 800254a:	230c      	movs	r3, #12
 800254c:	6033      	str	r3, [r6, #0]
 800254e:	2000      	movs	r0, #0
 8002550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002552:	f000 fc53 	bl	8002dfc <__malloc_lock>
 8002556:	4921      	ldr	r1, [pc, #132]	; (80025dc <_malloc_r+0xac>)
 8002558:	680a      	ldr	r2, [r1, #0]
 800255a:	4614      	mov	r4, r2
 800255c:	b99c      	cbnz	r4, 8002586 <_malloc_r+0x56>
 800255e:	4f20      	ldr	r7, [pc, #128]	; (80025e0 <_malloc_r+0xb0>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b923      	cbnz	r3, 800256e <_malloc_r+0x3e>
 8002564:	4621      	mov	r1, r4
 8002566:	4630      	mov	r0, r6
 8002568:	f000 f90a 	bl	8002780 <_sbrk_r>
 800256c:	6038      	str	r0, [r7, #0]
 800256e:	4629      	mov	r1, r5
 8002570:	4630      	mov	r0, r6
 8002572:	f000 f905 	bl	8002780 <_sbrk_r>
 8002576:	1c43      	adds	r3, r0, #1
 8002578:	d123      	bne.n	80025c2 <_malloc_r+0x92>
 800257a:	230c      	movs	r3, #12
 800257c:	6033      	str	r3, [r6, #0]
 800257e:	4630      	mov	r0, r6
 8002580:	f000 fc42 	bl	8002e08 <__malloc_unlock>
 8002584:	e7e3      	b.n	800254e <_malloc_r+0x1e>
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	1b5b      	subs	r3, r3, r5
 800258a:	d417      	bmi.n	80025bc <_malloc_r+0x8c>
 800258c:	2b0b      	cmp	r3, #11
 800258e:	d903      	bls.n	8002598 <_malloc_r+0x68>
 8002590:	6023      	str	r3, [r4, #0]
 8002592:	441c      	add	r4, r3
 8002594:	6025      	str	r5, [r4, #0]
 8002596:	e004      	b.n	80025a2 <_malloc_r+0x72>
 8002598:	6863      	ldr	r3, [r4, #4]
 800259a:	42a2      	cmp	r2, r4
 800259c:	bf0c      	ite	eq
 800259e:	600b      	streq	r3, [r1, #0]
 80025a0:	6053      	strne	r3, [r2, #4]
 80025a2:	4630      	mov	r0, r6
 80025a4:	f000 fc30 	bl	8002e08 <__malloc_unlock>
 80025a8:	f104 000b 	add.w	r0, r4, #11
 80025ac:	1d23      	adds	r3, r4, #4
 80025ae:	f020 0007 	bic.w	r0, r0, #7
 80025b2:	1ac2      	subs	r2, r0, r3
 80025b4:	d0cc      	beq.n	8002550 <_malloc_r+0x20>
 80025b6:	1a1b      	subs	r3, r3, r0
 80025b8:	50a3      	str	r3, [r4, r2]
 80025ba:	e7c9      	b.n	8002550 <_malloc_r+0x20>
 80025bc:	4622      	mov	r2, r4
 80025be:	6864      	ldr	r4, [r4, #4]
 80025c0:	e7cc      	b.n	800255c <_malloc_r+0x2c>
 80025c2:	1cc4      	adds	r4, r0, #3
 80025c4:	f024 0403 	bic.w	r4, r4, #3
 80025c8:	42a0      	cmp	r0, r4
 80025ca:	d0e3      	beq.n	8002594 <_malloc_r+0x64>
 80025cc:	1a21      	subs	r1, r4, r0
 80025ce:	4630      	mov	r0, r6
 80025d0:	f000 f8d6 	bl	8002780 <_sbrk_r>
 80025d4:	3001      	adds	r0, #1
 80025d6:	d1dd      	bne.n	8002594 <_malloc_r+0x64>
 80025d8:	e7cf      	b.n	800257a <_malloc_r+0x4a>
 80025da:	bf00      	nop
 80025dc:	20000090 	.word	0x20000090
 80025e0:	20000094 	.word	0x20000094

080025e4 <iprintf>:
 80025e4:	b40f      	push	{r0, r1, r2, r3}
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <iprintf+0x2c>)
 80025e8:	b513      	push	{r0, r1, r4, lr}
 80025ea:	681c      	ldr	r4, [r3, #0]
 80025ec:	b124      	cbz	r4, 80025f8 <iprintf+0x14>
 80025ee:	69a3      	ldr	r3, [r4, #24]
 80025f0:	b913      	cbnz	r3, 80025f8 <iprintf+0x14>
 80025f2:	4620      	mov	r0, r4
 80025f4:	f000 faec 	bl	8002bd0 <__sinit>
 80025f8:	ab05      	add	r3, sp, #20
 80025fa:	9a04      	ldr	r2, [sp, #16]
 80025fc:	68a1      	ldr	r1, [r4, #8]
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	4620      	mov	r0, r4
 8002602:	f000 fd8d 	bl	8003120 <_vfiprintf_r>
 8002606:	b002      	add	sp, #8
 8002608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800260c:	b004      	add	sp, #16
 800260e:	4770      	bx	lr
 8002610:	2000000c 	.word	0x2000000c

08002614 <_puts_r>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	460e      	mov	r6, r1
 8002618:	4605      	mov	r5, r0
 800261a:	b118      	cbz	r0, 8002624 <_puts_r+0x10>
 800261c:	6983      	ldr	r3, [r0, #24]
 800261e:	b90b      	cbnz	r3, 8002624 <_puts_r+0x10>
 8002620:	f000 fad6 	bl	8002bd0 <__sinit>
 8002624:	69ab      	ldr	r3, [r5, #24]
 8002626:	68ac      	ldr	r4, [r5, #8]
 8002628:	b913      	cbnz	r3, 8002630 <_puts_r+0x1c>
 800262a:	4628      	mov	r0, r5
 800262c:	f000 fad0 	bl	8002bd0 <__sinit>
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <_puts_r+0xd0>)
 8002632:	429c      	cmp	r4, r3
 8002634:	d120      	bne.n	8002678 <_puts_r+0x64>
 8002636:	686c      	ldr	r4, [r5, #4]
 8002638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800263a:	07db      	lsls	r3, r3, #31
 800263c:	d405      	bmi.n	800264a <_puts_r+0x36>
 800263e:	89a3      	ldrh	r3, [r4, #12]
 8002640:	0598      	lsls	r0, r3, #22
 8002642:	d402      	bmi.n	800264a <_puts_r+0x36>
 8002644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002646:	f000 fb73 	bl	8002d30 <__retarget_lock_acquire_recursive>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	0719      	lsls	r1, r3, #28
 800264e:	d51d      	bpl.n	800268c <_puts_r+0x78>
 8002650:	6923      	ldr	r3, [r4, #16]
 8002652:	b1db      	cbz	r3, 800268c <_puts_r+0x78>
 8002654:	3e01      	subs	r6, #1
 8002656:	68a3      	ldr	r3, [r4, #8]
 8002658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800265c:	3b01      	subs	r3, #1
 800265e:	60a3      	str	r3, [r4, #8]
 8002660:	bb39      	cbnz	r1, 80026b2 <_puts_r+0x9e>
 8002662:	2b00      	cmp	r3, #0
 8002664:	da38      	bge.n	80026d8 <_puts_r+0xc4>
 8002666:	4622      	mov	r2, r4
 8002668:	210a      	movs	r1, #10
 800266a:	4628      	mov	r0, r5
 800266c:	f000 f8b8 	bl	80027e0 <__swbuf_r>
 8002670:	3001      	adds	r0, #1
 8002672:	d011      	beq.n	8002698 <_puts_r+0x84>
 8002674:	250a      	movs	r5, #10
 8002676:	e011      	b.n	800269c <_puts_r+0x88>
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <_puts_r+0xd4>)
 800267a:	429c      	cmp	r4, r3
 800267c:	d101      	bne.n	8002682 <_puts_r+0x6e>
 800267e:	68ac      	ldr	r4, [r5, #8]
 8002680:	e7da      	b.n	8002638 <_puts_r+0x24>
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <_puts_r+0xd8>)
 8002684:	429c      	cmp	r4, r3
 8002686:	bf08      	it	eq
 8002688:	68ec      	ldreq	r4, [r5, #12]
 800268a:	e7d5      	b.n	8002638 <_puts_r+0x24>
 800268c:	4621      	mov	r1, r4
 800268e:	4628      	mov	r0, r5
 8002690:	f000 f8f8 	bl	8002884 <__swsetup_r>
 8002694:	2800      	cmp	r0, #0
 8002696:	d0dd      	beq.n	8002654 <_puts_r+0x40>
 8002698:	f04f 35ff 	mov.w	r5, #4294967295
 800269c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800269e:	07da      	lsls	r2, r3, #31
 80026a0:	d405      	bmi.n	80026ae <_puts_r+0x9a>
 80026a2:	89a3      	ldrh	r3, [r4, #12]
 80026a4:	059b      	lsls	r3, r3, #22
 80026a6:	d402      	bmi.n	80026ae <_puts_r+0x9a>
 80026a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026aa:	f000 fb42 	bl	8002d32 <__retarget_lock_release_recursive>
 80026ae:	4628      	mov	r0, r5
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da04      	bge.n	80026c0 <_puts_r+0xac>
 80026b6:	69a2      	ldr	r2, [r4, #24]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dc06      	bgt.n	80026ca <_puts_r+0xb6>
 80026bc:	290a      	cmp	r1, #10
 80026be:	d004      	beq.n	80026ca <_puts_r+0xb6>
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	6022      	str	r2, [r4, #0]
 80026c6:	7019      	strb	r1, [r3, #0]
 80026c8:	e7c5      	b.n	8002656 <_puts_r+0x42>
 80026ca:	4622      	mov	r2, r4
 80026cc:	4628      	mov	r0, r5
 80026ce:	f000 f887 	bl	80027e0 <__swbuf_r>
 80026d2:	3001      	adds	r0, #1
 80026d4:	d1bf      	bne.n	8002656 <_puts_r+0x42>
 80026d6:	e7df      	b.n	8002698 <_puts_r+0x84>
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	250a      	movs	r5, #10
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	6022      	str	r2, [r4, #0]
 80026e0:	701d      	strb	r5, [r3, #0]
 80026e2:	e7db      	b.n	800269c <_puts_r+0x88>
 80026e4:	08003b74 	.word	0x08003b74
 80026e8:	08003b94 	.word	0x08003b94
 80026ec:	08003b54 	.word	0x08003b54

080026f0 <puts>:
 80026f0:	4b02      	ldr	r3, [pc, #8]	; (80026fc <puts+0xc>)
 80026f2:	4601      	mov	r1, r0
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	f7ff bf8d 	b.w	8002614 <_puts_r>
 80026fa:	bf00      	nop
 80026fc:	2000000c 	.word	0x2000000c

08002700 <rand>:
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <rand+0x60>)
 8002702:	b510      	push	{r4, lr}
 8002704:	681c      	ldr	r4, [r3, #0]
 8002706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002708:	b9b3      	cbnz	r3, 8002738 <rand+0x38>
 800270a:	2018      	movs	r0, #24
 800270c:	f7ff feb0 	bl	8002470 <malloc>
 8002710:	63a0      	str	r0, [r4, #56]	; 0x38
 8002712:	b928      	cbnz	r0, 8002720 <rand+0x20>
 8002714:	4602      	mov	r2, r0
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <rand+0x64>)
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <rand+0x68>)
 800271a:	214e      	movs	r1, #78	; 0x4e
 800271c:	f000 f920 	bl	8002960 <__assert_func>
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <rand+0x6c>)
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <rand+0x70>)
 8002724:	e9c0 2300 	strd	r2, r3, [r0]
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <rand+0x74>)
 800272a:	6083      	str	r3, [r0, #8]
 800272c:	230b      	movs	r3, #11
 800272e:	8183      	strh	r3, [r0, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	2300      	movs	r3, #0
 8002734:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002738:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800273a:	480f      	ldr	r0, [pc, #60]	; (8002778 <rand+0x78>)
 800273c:	690a      	ldr	r2, [r1, #16]
 800273e:	694b      	ldr	r3, [r1, #20]
 8002740:	4c0e      	ldr	r4, [pc, #56]	; (800277c <rand+0x7c>)
 8002742:	4350      	muls	r0, r2
 8002744:	fb04 0003 	mla	r0, r4, r3, r0
 8002748:	fba2 3404 	umull	r3, r4, r2, r4
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4404      	add	r4, r0
 8002750:	f144 0000 	adc.w	r0, r4, #0
 8002754:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002758:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800275c:	bd10      	pop	{r4, pc}
 800275e:	bf00      	nop
 8002760:	2000000c 	.word	0x2000000c
 8002764:	08003aa0 	.word	0x08003aa0
 8002768:	08003ab7 	.word	0x08003ab7
 800276c:	abcd330e 	.word	0xabcd330e
 8002770:	e66d1234 	.word	0xe66d1234
 8002774:	0005deec 	.word	0x0005deec
 8002778:	5851f42d 	.word	0x5851f42d
 800277c:	4c957f2d 	.word	0x4c957f2d

08002780 <_sbrk_r>:
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4d06      	ldr	r5, [pc, #24]	; (800279c <_sbrk_r+0x1c>)
 8002784:	2300      	movs	r3, #0
 8002786:	4604      	mov	r4, r0
 8002788:	4608      	mov	r0, r1
 800278a:	602b      	str	r3, [r5, #0]
 800278c:	f7fe fb80 	bl	8000e90 <_sbrk>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d102      	bne.n	800279a <_sbrk_r+0x1a>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	b103      	cbz	r3, 800279a <_sbrk_r+0x1a>
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	bd38      	pop	{r3, r4, r5, pc}
 800279c:	200000ec 	.word	0x200000ec

080027a0 <siprintf>:
 80027a0:	b40e      	push	{r1, r2, r3}
 80027a2:	b500      	push	{lr}
 80027a4:	b09c      	sub	sp, #112	; 0x70
 80027a6:	ab1d      	add	r3, sp, #116	; 0x74
 80027a8:	9002      	str	r0, [sp, #8]
 80027aa:	9006      	str	r0, [sp, #24]
 80027ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <siprintf+0x38>)
 80027b2:	9107      	str	r1, [sp, #28]
 80027b4:	9104      	str	r1, [sp, #16]
 80027b6:	4909      	ldr	r1, [pc, #36]	; (80027dc <siprintf+0x3c>)
 80027b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80027bc:	9105      	str	r1, [sp, #20]
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	a902      	add	r1, sp, #8
 80027c4:	f000 fb82 	bl	8002ecc <_svfiprintf_r>
 80027c8:	9b02      	ldr	r3, [sp, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	b01c      	add	sp, #112	; 0x70
 80027d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027d4:	b003      	add	sp, #12
 80027d6:	4770      	bx	lr
 80027d8:	2000000c 	.word	0x2000000c
 80027dc:	ffff0208 	.word	0xffff0208

080027e0 <__swbuf_r>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	460e      	mov	r6, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	4605      	mov	r5, r0
 80027e8:	b118      	cbz	r0, 80027f2 <__swbuf_r+0x12>
 80027ea:	6983      	ldr	r3, [r0, #24]
 80027ec:	b90b      	cbnz	r3, 80027f2 <__swbuf_r+0x12>
 80027ee:	f000 f9ef 	bl	8002bd0 <__sinit>
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <__swbuf_r+0x98>)
 80027f4:	429c      	cmp	r4, r3
 80027f6:	d12b      	bne.n	8002850 <__swbuf_r+0x70>
 80027f8:	686c      	ldr	r4, [r5, #4]
 80027fa:	69a3      	ldr	r3, [r4, #24]
 80027fc:	60a3      	str	r3, [r4, #8]
 80027fe:	89a3      	ldrh	r3, [r4, #12]
 8002800:	071a      	lsls	r2, r3, #28
 8002802:	d52f      	bpl.n	8002864 <__swbuf_r+0x84>
 8002804:	6923      	ldr	r3, [r4, #16]
 8002806:	b36b      	cbz	r3, 8002864 <__swbuf_r+0x84>
 8002808:	6923      	ldr	r3, [r4, #16]
 800280a:	6820      	ldr	r0, [r4, #0]
 800280c:	1ac0      	subs	r0, r0, r3
 800280e:	6963      	ldr	r3, [r4, #20]
 8002810:	b2f6      	uxtb	r6, r6
 8002812:	4283      	cmp	r3, r0
 8002814:	4637      	mov	r7, r6
 8002816:	dc04      	bgt.n	8002822 <__swbuf_r+0x42>
 8002818:	4621      	mov	r1, r4
 800281a:	4628      	mov	r0, r5
 800281c:	f000 f944 	bl	8002aa8 <_fflush_r>
 8002820:	bb30      	cbnz	r0, 8002870 <__swbuf_r+0x90>
 8002822:	68a3      	ldr	r3, [r4, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	60a3      	str	r3, [r4, #8]
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	6022      	str	r2, [r4, #0]
 800282e:	701e      	strb	r6, [r3, #0]
 8002830:	6963      	ldr	r3, [r4, #20]
 8002832:	3001      	adds	r0, #1
 8002834:	4283      	cmp	r3, r0
 8002836:	d004      	beq.n	8002842 <__swbuf_r+0x62>
 8002838:	89a3      	ldrh	r3, [r4, #12]
 800283a:	07db      	lsls	r3, r3, #31
 800283c:	d506      	bpl.n	800284c <__swbuf_r+0x6c>
 800283e:	2e0a      	cmp	r6, #10
 8002840:	d104      	bne.n	800284c <__swbuf_r+0x6c>
 8002842:	4621      	mov	r1, r4
 8002844:	4628      	mov	r0, r5
 8002846:	f000 f92f 	bl	8002aa8 <_fflush_r>
 800284a:	b988      	cbnz	r0, 8002870 <__swbuf_r+0x90>
 800284c:	4638      	mov	r0, r7
 800284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <__swbuf_r+0x9c>)
 8002852:	429c      	cmp	r4, r3
 8002854:	d101      	bne.n	800285a <__swbuf_r+0x7a>
 8002856:	68ac      	ldr	r4, [r5, #8]
 8002858:	e7cf      	b.n	80027fa <__swbuf_r+0x1a>
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <__swbuf_r+0xa0>)
 800285c:	429c      	cmp	r4, r3
 800285e:	bf08      	it	eq
 8002860:	68ec      	ldreq	r4, [r5, #12]
 8002862:	e7ca      	b.n	80027fa <__swbuf_r+0x1a>
 8002864:	4621      	mov	r1, r4
 8002866:	4628      	mov	r0, r5
 8002868:	f000 f80c 	bl	8002884 <__swsetup_r>
 800286c:	2800      	cmp	r0, #0
 800286e:	d0cb      	beq.n	8002808 <__swbuf_r+0x28>
 8002870:	f04f 37ff 	mov.w	r7, #4294967295
 8002874:	e7ea      	b.n	800284c <__swbuf_r+0x6c>
 8002876:	bf00      	nop
 8002878:	08003b74 	.word	0x08003b74
 800287c:	08003b94 	.word	0x08003b94
 8002880:	08003b54 	.word	0x08003b54

08002884 <__swsetup_r>:
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <__swsetup_r+0xcc>)
 8002886:	b570      	push	{r4, r5, r6, lr}
 8002888:	681d      	ldr	r5, [r3, #0]
 800288a:	4606      	mov	r6, r0
 800288c:	460c      	mov	r4, r1
 800288e:	b125      	cbz	r5, 800289a <__swsetup_r+0x16>
 8002890:	69ab      	ldr	r3, [r5, #24]
 8002892:	b913      	cbnz	r3, 800289a <__swsetup_r+0x16>
 8002894:	4628      	mov	r0, r5
 8002896:	f000 f99b 	bl	8002bd0 <__sinit>
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <__swsetup_r+0xd0>)
 800289c:	429c      	cmp	r4, r3
 800289e:	d10f      	bne.n	80028c0 <__swsetup_r+0x3c>
 80028a0:	686c      	ldr	r4, [r5, #4]
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028a8:	0719      	lsls	r1, r3, #28
 80028aa:	d42c      	bmi.n	8002906 <__swsetup_r+0x82>
 80028ac:	06dd      	lsls	r5, r3, #27
 80028ae:	d411      	bmi.n	80028d4 <__swsetup_r+0x50>
 80028b0:	2309      	movs	r3, #9
 80028b2:	6033      	str	r3, [r6, #0]
 80028b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80028b8:	81a3      	strh	r3, [r4, #12]
 80028ba:	f04f 30ff 	mov.w	r0, #4294967295
 80028be:	e03e      	b.n	800293e <__swsetup_r+0xba>
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <__swsetup_r+0xd4>)
 80028c2:	429c      	cmp	r4, r3
 80028c4:	d101      	bne.n	80028ca <__swsetup_r+0x46>
 80028c6:	68ac      	ldr	r4, [r5, #8]
 80028c8:	e7eb      	b.n	80028a2 <__swsetup_r+0x1e>
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <__swsetup_r+0xd8>)
 80028cc:	429c      	cmp	r4, r3
 80028ce:	bf08      	it	eq
 80028d0:	68ec      	ldreq	r4, [r5, #12]
 80028d2:	e7e6      	b.n	80028a2 <__swsetup_r+0x1e>
 80028d4:	0758      	lsls	r0, r3, #29
 80028d6:	d512      	bpl.n	80028fe <__swsetup_r+0x7a>
 80028d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028da:	b141      	cbz	r1, 80028ee <__swsetup_r+0x6a>
 80028dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028e0:	4299      	cmp	r1, r3
 80028e2:	d002      	beq.n	80028ea <__swsetup_r+0x66>
 80028e4:	4630      	mov	r0, r6
 80028e6:	f7ff fdd3 	bl	8002490 <_free_r>
 80028ea:	2300      	movs	r3, #0
 80028ec:	6363      	str	r3, [r4, #52]	; 0x34
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028f4:	81a3      	strh	r3, [r4, #12]
 80028f6:	2300      	movs	r3, #0
 80028f8:	6063      	str	r3, [r4, #4]
 80028fa:	6923      	ldr	r3, [r4, #16]
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	89a3      	ldrh	r3, [r4, #12]
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	81a3      	strh	r3, [r4, #12]
 8002906:	6923      	ldr	r3, [r4, #16]
 8002908:	b94b      	cbnz	r3, 800291e <__swsetup_r+0x9a>
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002914:	d003      	beq.n	800291e <__swsetup_r+0x9a>
 8002916:	4621      	mov	r1, r4
 8002918:	4630      	mov	r0, r6
 800291a:	f000 fa2f 	bl	8002d7c <__smakebuf_r>
 800291e:	89a0      	ldrh	r0, [r4, #12]
 8002920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002924:	f010 0301 	ands.w	r3, r0, #1
 8002928:	d00a      	beq.n	8002940 <__swsetup_r+0xbc>
 800292a:	2300      	movs	r3, #0
 800292c:	60a3      	str	r3, [r4, #8]
 800292e:	6963      	ldr	r3, [r4, #20]
 8002930:	425b      	negs	r3, r3
 8002932:	61a3      	str	r3, [r4, #24]
 8002934:	6923      	ldr	r3, [r4, #16]
 8002936:	b943      	cbnz	r3, 800294a <__swsetup_r+0xc6>
 8002938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800293c:	d1ba      	bne.n	80028b4 <__swsetup_r+0x30>
 800293e:	bd70      	pop	{r4, r5, r6, pc}
 8002940:	0781      	lsls	r1, r0, #30
 8002942:	bf58      	it	pl
 8002944:	6963      	ldrpl	r3, [r4, #20]
 8002946:	60a3      	str	r3, [r4, #8]
 8002948:	e7f4      	b.n	8002934 <__swsetup_r+0xb0>
 800294a:	2000      	movs	r0, #0
 800294c:	e7f7      	b.n	800293e <__swsetup_r+0xba>
 800294e:	bf00      	nop
 8002950:	2000000c 	.word	0x2000000c
 8002954:	08003b74 	.word	0x08003b74
 8002958:	08003b94 	.word	0x08003b94
 800295c:	08003b54 	.word	0x08003b54

08002960 <__assert_func>:
 8002960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002962:	4614      	mov	r4, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <__assert_func+0x2c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4605      	mov	r5, r0
 800296c:	68d8      	ldr	r0, [r3, #12]
 800296e:	b14c      	cbz	r4, 8002984 <__assert_func+0x24>
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <__assert_func+0x30>)
 8002972:	9100      	str	r1, [sp, #0]
 8002974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002978:	4906      	ldr	r1, [pc, #24]	; (8002994 <__assert_func+0x34>)
 800297a:	462b      	mov	r3, r5
 800297c:	f000 f9a6 	bl	8002ccc <fiprintf>
 8002980:	f000 fee8 	bl	8003754 <abort>
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__assert_func+0x38>)
 8002986:	461c      	mov	r4, r3
 8002988:	e7f3      	b.n	8002972 <__assert_func+0x12>
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c
 8002990:	08003b16 	.word	0x08003b16
 8002994:	08003b23 	.word	0x08003b23
 8002998:	08003b51 	.word	0x08003b51

0800299c <__sflush_r>:
 800299c:	898a      	ldrh	r2, [r1, #12]
 800299e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a2:	4605      	mov	r5, r0
 80029a4:	0710      	lsls	r0, r2, #28
 80029a6:	460c      	mov	r4, r1
 80029a8:	d458      	bmi.n	8002a5c <__sflush_r+0xc0>
 80029aa:	684b      	ldr	r3, [r1, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	dc05      	bgt.n	80029bc <__sflush_r+0x20>
 80029b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	dc02      	bgt.n	80029bc <__sflush_r+0x20>
 80029b6:	2000      	movs	r0, #0
 80029b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029be:	2e00      	cmp	r6, #0
 80029c0:	d0f9      	beq.n	80029b6 <__sflush_r+0x1a>
 80029c2:	2300      	movs	r3, #0
 80029c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029c8:	682f      	ldr	r7, [r5, #0]
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	d032      	beq.n	8002a34 <__sflush_r+0x98>
 80029ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029d0:	89a3      	ldrh	r3, [r4, #12]
 80029d2:	075a      	lsls	r2, r3, #29
 80029d4:	d505      	bpl.n	80029e2 <__sflush_r+0x46>
 80029d6:	6863      	ldr	r3, [r4, #4]
 80029d8:	1ac0      	subs	r0, r0, r3
 80029da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029dc:	b10b      	cbz	r3, 80029e2 <__sflush_r+0x46>
 80029de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029e0:	1ac0      	subs	r0, r0, r3
 80029e2:	2300      	movs	r3, #0
 80029e4:	4602      	mov	r2, r0
 80029e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029e8:	6a21      	ldr	r1, [r4, #32]
 80029ea:	4628      	mov	r0, r5
 80029ec:	47b0      	blx	r6
 80029ee:	1c43      	adds	r3, r0, #1
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	d106      	bne.n	8002a02 <__sflush_r+0x66>
 80029f4:	6829      	ldr	r1, [r5, #0]
 80029f6:	291d      	cmp	r1, #29
 80029f8:	d82c      	bhi.n	8002a54 <__sflush_r+0xb8>
 80029fa:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <__sflush_r+0x108>)
 80029fc:	40ca      	lsrs	r2, r1
 80029fe:	07d6      	lsls	r6, r2, #31
 8002a00:	d528      	bpl.n	8002a54 <__sflush_r+0xb8>
 8002a02:	2200      	movs	r2, #0
 8002a04:	6062      	str	r2, [r4, #4]
 8002a06:	04d9      	lsls	r1, r3, #19
 8002a08:	6922      	ldr	r2, [r4, #16]
 8002a0a:	6022      	str	r2, [r4, #0]
 8002a0c:	d504      	bpl.n	8002a18 <__sflush_r+0x7c>
 8002a0e:	1c42      	adds	r2, r0, #1
 8002a10:	d101      	bne.n	8002a16 <__sflush_r+0x7a>
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	b903      	cbnz	r3, 8002a18 <__sflush_r+0x7c>
 8002a16:	6560      	str	r0, [r4, #84]	; 0x54
 8002a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a1a:	602f      	str	r7, [r5, #0]
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d0ca      	beq.n	80029b6 <__sflush_r+0x1a>
 8002a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a24:	4299      	cmp	r1, r3
 8002a26:	d002      	beq.n	8002a2e <__sflush_r+0x92>
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f7ff fd31 	bl	8002490 <_free_r>
 8002a2e:	2000      	movs	r0, #0
 8002a30:	6360      	str	r0, [r4, #52]	; 0x34
 8002a32:	e7c1      	b.n	80029b8 <__sflush_r+0x1c>
 8002a34:	6a21      	ldr	r1, [r4, #32]
 8002a36:	2301      	movs	r3, #1
 8002a38:	4628      	mov	r0, r5
 8002a3a:	47b0      	blx	r6
 8002a3c:	1c41      	adds	r1, r0, #1
 8002a3e:	d1c7      	bne.n	80029d0 <__sflush_r+0x34>
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0c4      	beq.n	80029d0 <__sflush_r+0x34>
 8002a46:	2b1d      	cmp	r3, #29
 8002a48:	d001      	beq.n	8002a4e <__sflush_r+0xb2>
 8002a4a:	2b16      	cmp	r3, #22
 8002a4c:	d101      	bne.n	8002a52 <__sflush_r+0xb6>
 8002a4e:	602f      	str	r7, [r5, #0]
 8002a50:	e7b1      	b.n	80029b6 <__sflush_r+0x1a>
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	81a3      	strh	r3, [r4, #12]
 8002a5a:	e7ad      	b.n	80029b8 <__sflush_r+0x1c>
 8002a5c:	690f      	ldr	r7, [r1, #16]
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	d0a9      	beq.n	80029b6 <__sflush_r+0x1a>
 8002a62:	0793      	lsls	r3, r2, #30
 8002a64:	680e      	ldr	r6, [r1, #0]
 8002a66:	bf08      	it	eq
 8002a68:	694b      	ldreq	r3, [r1, #20]
 8002a6a:	600f      	str	r7, [r1, #0]
 8002a6c:	bf18      	it	ne
 8002a6e:	2300      	movne	r3, #0
 8002a70:	eba6 0807 	sub.w	r8, r6, r7
 8002a74:	608b      	str	r3, [r1, #8]
 8002a76:	f1b8 0f00 	cmp.w	r8, #0
 8002a7a:	dd9c      	ble.n	80029b6 <__sflush_r+0x1a>
 8002a7c:	6a21      	ldr	r1, [r4, #32]
 8002a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a80:	4643      	mov	r3, r8
 8002a82:	463a      	mov	r2, r7
 8002a84:	4628      	mov	r0, r5
 8002a86:	47b0      	blx	r6
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	dc06      	bgt.n	8002a9a <__sflush_r+0xfe>
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	e78e      	b.n	80029b8 <__sflush_r+0x1c>
 8002a9a:	4407      	add	r7, r0
 8002a9c:	eba8 0800 	sub.w	r8, r8, r0
 8002aa0:	e7e9      	b.n	8002a76 <__sflush_r+0xda>
 8002aa2:	bf00      	nop
 8002aa4:	20400001 	.word	0x20400001

08002aa8 <_fflush_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	690b      	ldr	r3, [r1, #16]
 8002aac:	4605      	mov	r5, r0
 8002aae:	460c      	mov	r4, r1
 8002ab0:	b913      	cbnz	r3, 8002ab8 <_fflush_r+0x10>
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	b118      	cbz	r0, 8002ac2 <_fflush_r+0x1a>
 8002aba:	6983      	ldr	r3, [r0, #24]
 8002abc:	b90b      	cbnz	r3, 8002ac2 <_fflush_r+0x1a>
 8002abe:	f000 f887 	bl	8002bd0 <__sinit>
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <_fflush_r+0x6c>)
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	d11b      	bne.n	8002b00 <_fflush_r+0x58>
 8002ac8:	686c      	ldr	r4, [r5, #4]
 8002aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ef      	beq.n	8002ab2 <_fflush_r+0xa>
 8002ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ad4:	07d0      	lsls	r0, r2, #31
 8002ad6:	d404      	bmi.n	8002ae2 <_fflush_r+0x3a>
 8002ad8:	0599      	lsls	r1, r3, #22
 8002ada:	d402      	bmi.n	8002ae2 <_fflush_r+0x3a>
 8002adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ade:	f000 f927 	bl	8002d30 <__retarget_lock_acquire_recursive>
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	f7ff ff59 	bl	800299c <__sflush_r>
 8002aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aec:	07da      	lsls	r2, r3, #31
 8002aee:	4605      	mov	r5, r0
 8002af0:	d4e0      	bmi.n	8002ab4 <_fflush_r+0xc>
 8002af2:	89a3      	ldrh	r3, [r4, #12]
 8002af4:	059b      	lsls	r3, r3, #22
 8002af6:	d4dd      	bmi.n	8002ab4 <_fflush_r+0xc>
 8002af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002afa:	f000 f91a 	bl	8002d32 <__retarget_lock_release_recursive>
 8002afe:	e7d9      	b.n	8002ab4 <_fflush_r+0xc>
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <_fflush_r+0x70>)
 8002b02:	429c      	cmp	r4, r3
 8002b04:	d101      	bne.n	8002b0a <_fflush_r+0x62>
 8002b06:	68ac      	ldr	r4, [r5, #8]
 8002b08:	e7df      	b.n	8002aca <_fflush_r+0x22>
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <_fflush_r+0x74>)
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	bf08      	it	eq
 8002b10:	68ec      	ldreq	r4, [r5, #12]
 8002b12:	e7da      	b.n	8002aca <_fflush_r+0x22>
 8002b14:	08003b74 	.word	0x08003b74
 8002b18:	08003b94 	.word	0x08003b94
 8002b1c:	08003b54 	.word	0x08003b54

08002b20 <std>:
 8002b20:	2300      	movs	r3, #0
 8002b22:	b510      	push	{r4, lr}
 8002b24:	4604      	mov	r4, r0
 8002b26:	e9c0 3300 	strd	r3, r3, [r0]
 8002b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b2e:	6083      	str	r3, [r0, #8]
 8002b30:	8181      	strh	r1, [r0, #12]
 8002b32:	6643      	str	r3, [r0, #100]	; 0x64
 8002b34:	81c2      	strh	r2, [r0, #14]
 8002b36:	6183      	str	r3, [r0, #24]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	305c      	adds	r0, #92	; 0x5c
 8002b3e:	f7ff fc9f 	bl	8002480 <memset>
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <std+0x38>)
 8002b44:	6263      	str	r3, [r4, #36]	; 0x24
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <std+0x3c>)
 8002b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <std+0x40>)
 8002b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <std+0x44>)
 8002b50:	6224      	str	r4, [r4, #32]
 8002b52:	6323      	str	r3, [r4, #48]	; 0x30
 8002b54:	bd10      	pop	{r4, pc}
 8002b56:	bf00      	nop
 8002b58:	080036a9 	.word	0x080036a9
 8002b5c:	080036cb 	.word	0x080036cb
 8002b60:	08003703 	.word	0x08003703
 8002b64:	08003727 	.word	0x08003727

08002b68 <_cleanup_r>:
 8002b68:	4901      	ldr	r1, [pc, #4]	; (8002b70 <_cleanup_r+0x8>)
 8002b6a:	f000 b8c1 	b.w	8002cf0 <_fwalk_reent>
 8002b6e:	bf00      	nop
 8002b70:	08002aa9 	.word	0x08002aa9

08002b74 <__sfmoreglue>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	1e4a      	subs	r2, r1, #1
 8002b78:	2568      	movs	r5, #104	; 0x68
 8002b7a:	4355      	muls	r5, r2
 8002b7c:	460e      	mov	r6, r1
 8002b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b82:	f7ff fcd5 	bl	8002530 <_malloc_r>
 8002b86:	4604      	mov	r4, r0
 8002b88:	b140      	cbz	r0, 8002b9c <__sfmoreglue+0x28>
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	e9c0 1600 	strd	r1, r6, [r0]
 8002b90:	300c      	adds	r0, #12
 8002b92:	60a0      	str	r0, [r4, #8]
 8002b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b98:	f7ff fc72 	bl	8002480 <memset>
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}

08002ba0 <__sfp_lock_acquire>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <__sfp_lock_acquire+0x8>)
 8002ba2:	f000 b8c5 	b.w	8002d30 <__retarget_lock_acquire_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	200000e8 	.word	0x200000e8

08002bac <__sfp_lock_release>:
 8002bac:	4801      	ldr	r0, [pc, #4]	; (8002bb4 <__sfp_lock_release+0x8>)
 8002bae:	f000 b8c0 	b.w	8002d32 <__retarget_lock_release_recursive>
 8002bb2:	bf00      	nop
 8002bb4:	200000e8 	.word	0x200000e8

08002bb8 <__sinit_lock_acquire>:
 8002bb8:	4801      	ldr	r0, [pc, #4]	; (8002bc0 <__sinit_lock_acquire+0x8>)
 8002bba:	f000 b8b9 	b.w	8002d30 <__retarget_lock_acquire_recursive>
 8002bbe:	bf00      	nop
 8002bc0:	200000e3 	.word	0x200000e3

08002bc4 <__sinit_lock_release>:
 8002bc4:	4801      	ldr	r0, [pc, #4]	; (8002bcc <__sinit_lock_release+0x8>)
 8002bc6:	f000 b8b4 	b.w	8002d32 <__retarget_lock_release_recursive>
 8002bca:	bf00      	nop
 8002bcc:	200000e3 	.word	0x200000e3

08002bd0 <__sinit>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	f7ff fff0 	bl	8002bb8 <__sinit_lock_acquire>
 8002bd8:	69a3      	ldr	r3, [r4, #24]
 8002bda:	b11b      	cbz	r3, 8002be4 <__sinit+0x14>
 8002bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be0:	f7ff bff0 	b.w	8002bc4 <__sinit_lock_release>
 8002be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002be8:	6523      	str	r3, [r4, #80]	; 0x50
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <__sinit+0x68>)
 8002bec:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <__sinit+0x6c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002bf2:	42a3      	cmp	r3, r4
 8002bf4:	bf04      	itt	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	61a3      	streq	r3, [r4, #24]
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f000 f820 	bl	8002c40 <__sfp>
 8002c00:	6060      	str	r0, [r4, #4]
 8002c02:	4620      	mov	r0, r4
 8002c04:	f000 f81c 	bl	8002c40 <__sfp>
 8002c08:	60a0      	str	r0, [r4, #8]
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f000 f818 	bl	8002c40 <__sfp>
 8002c10:	2200      	movs	r2, #0
 8002c12:	60e0      	str	r0, [r4, #12]
 8002c14:	2104      	movs	r1, #4
 8002c16:	6860      	ldr	r0, [r4, #4]
 8002c18:	f7ff ff82 	bl	8002b20 <std>
 8002c1c:	68a0      	ldr	r0, [r4, #8]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	2109      	movs	r1, #9
 8002c22:	f7ff ff7d 	bl	8002b20 <std>
 8002c26:	68e0      	ldr	r0, [r4, #12]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	2112      	movs	r1, #18
 8002c2c:	f7ff ff78 	bl	8002b20 <std>
 8002c30:	2301      	movs	r3, #1
 8002c32:	61a3      	str	r3, [r4, #24]
 8002c34:	e7d2      	b.n	8002bdc <__sinit+0xc>
 8002c36:	bf00      	nop
 8002c38:	08003a9c 	.word	0x08003a9c
 8002c3c:	08002b69 	.word	0x08002b69

08002c40 <__sfp>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	4607      	mov	r7, r0
 8002c44:	f7ff ffac 	bl	8002ba0 <__sfp_lock_acquire>
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <__sfp+0x84>)
 8002c4a:	681e      	ldr	r6, [r3, #0]
 8002c4c:	69b3      	ldr	r3, [r6, #24]
 8002c4e:	b913      	cbnz	r3, 8002c56 <__sfp+0x16>
 8002c50:	4630      	mov	r0, r6
 8002c52:	f7ff ffbd 	bl	8002bd0 <__sinit>
 8002c56:	3648      	adds	r6, #72	; 0x48
 8002c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	d503      	bpl.n	8002c68 <__sfp+0x28>
 8002c60:	6833      	ldr	r3, [r6, #0]
 8002c62:	b30b      	cbz	r3, 8002ca8 <__sfp+0x68>
 8002c64:	6836      	ldr	r6, [r6, #0]
 8002c66:	e7f7      	b.n	8002c58 <__sfp+0x18>
 8002c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c6c:	b9d5      	cbnz	r5, 8002ca4 <__sfp+0x64>
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <__sfp+0x88>)
 8002c70:	60e3      	str	r3, [r4, #12]
 8002c72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c76:	6665      	str	r5, [r4, #100]	; 0x64
 8002c78:	f000 f859 	bl	8002d2e <__retarget_lock_init_recursive>
 8002c7c:	f7ff ff96 	bl	8002bac <__sfp_lock_release>
 8002c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c88:	6025      	str	r5, [r4, #0]
 8002c8a:	61a5      	str	r5, [r4, #24]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	4629      	mov	r1, r5
 8002c90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c94:	f7ff fbf4 	bl	8002480 <memset>
 8002c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ca4:	3468      	adds	r4, #104	; 0x68
 8002ca6:	e7d9      	b.n	8002c5c <__sfp+0x1c>
 8002ca8:	2104      	movs	r1, #4
 8002caa:	4638      	mov	r0, r7
 8002cac:	f7ff ff62 	bl	8002b74 <__sfmoreglue>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	6030      	str	r0, [r6, #0]
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d1d5      	bne.n	8002c64 <__sfp+0x24>
 8002cb8:	f7ff ff78 	bl	8002bac <__sfp_lock_release>
 8002cbc:	230c      	movs	r3, #12
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	e7ee      	b.n	8002ca0 <__sfp+0x60>
 8002cc2:	bf00      	nop
 8002cc4:	08003a9c 	.word	0x08003a9c
 8002cc8:	ffff0001 	.word	0xffff0001

08002ccc <fiprintf>:
 8002ccc:	b40e      	push	{r1, r2, r3}
 8002cce:	b503      	push	{r0, r1, lr}
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	ab03      	add	r3, sp, #12
 8002cd4:	4805      	ldr	r0, [pc, #20]	; (8002cec <fiprintf+0x20>)
 8002cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	f000 fa1f 	bl	8003120 <_vfiprintf_r>
 8002ce2:	b002      	add	sp, #8
 8002ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ce8:	b003      	add	sp, #12
 8002cea:	4770      	bx	lr
 8002cec:	2000000c 	.word	0x2000000c

08002cf0 <_fwalk_reent>:
 8002cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf4:	4606      	mov	r6, r0
 8002cf6:	4688      	mov	r8, r1
 8002cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002cfc:	2700      	movs	r7, #0
 8002cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d02:	f1b9 0901 	subs.w	r9, r9, #1
 8002d06:	d505      	bpl.n	8002d14 <_fwalk_reent+0x24>
 8002d08:	6824      	ldr	r4, [r4, #0]
 8002d0a:	2c00      	cmp	r4, #0
 8002d0c:	d1f7      	bne.n	8002cfe <_fwalk_reent+0xe>
 8002d0e:	4638      	mov	r0, r7
 8002d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d14:	89ab      	ldrh	r3, [r5, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d907      	bls.n	8002d2a <_fwalk_reent+0x3a>
 8002d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	d003      	beq.n	8002d2a <_fwalk_reent+0x3a>
 8002d22:	4629      	mov	r1, r5
 8002d24:	4630      	mov	r0, r6
 8002d26:	47c0      	blx	r8
 8002d28:	4307      	orrs	r7, r0
 8002d2a:	3568      	adds	r5, #104	; 0x68
 8002d2c:	e7e9      	b.n	8002d02 <_fwalk_reent+0x12>

08002d2e <__retarget_lock_init_recursive>:
 8002d2e:	4770      	bx	lr

08002d30 <__retarget_lock_acquire_recursive>:
 8002d30:	4770      	bx	lr

08002d32 <__retarget_lock_release_recursive>:
 8002d32:	4770      	bx	lr

08002d34 <__swhatbuf_r>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	460e      	mov	r6, r1
 8002d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	b096      	sub	sp, #88	; 0x58
 8002d40:	4614      	mov	r4, r2
 8002d42:	461d      	mov	r5, r3
 8002d44:	da07      	bge.n	8002d56 <__swhatbuf_r+0x22>
 8002d46:	2300      	movs	r3, #0
 8002d48:	602b      	str	r3, [r5, #0]
 8002d4a:	89b3      	ldrh	r3, [r6, #12]
 8002d4c:	061a      	lsls	r2, r3, #24
 8002d4e:	d410      	bmi.n	8002d72 <__swhatbuf_r+0x3e>
 8002d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d54:	e00e      	b.n	8002d74 <__swhatbuf_r+0x40>
 8002d56:	466a      	mov	r2, sp
 8002d58:	f000 fd14 	bl	8003784 <_fstat_r>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	dbf2      	blt.n	8002d46 <__swhatbuf_r+0x12>
 8002d60:	9a01      	ldr	r2, [sp, #4]
 8002d62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d6a:	425a      	negs	r2, r3
 8002d6c:	415a      	adcs	r2, r3
 8002d6e:	602a      	str	r2, [r5, #0]
 8002d70:	e7ee      	b.n	8002d50 <__swhatbuf_r+0x1c>
 8002d72:	2340      	movs	r3, #64	; 0x40
 8002d74:	2000      	movs	r0, #0
 8002d76:	6023      	str	r3, [r4, #0]
 8002d78:	b016      	add	sp, #88	; 0x58
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}

08002d7c <__smakebuf_r>:
 8002d7c:	898b      	ldrh	r3, [r1, #12]
 8002d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d80:	079d      	lsls	r5, r3, #30
 8002d82:	4606      	mov	r6, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	d507      	bpl.n	8002d98 <__smakebuf_r+0x1c>
 8002d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	6123      	str	r3, [r4, #16]
 8002d90:	2301      	movs	r3, #1
 8002d92:	6163      	str	r3, [r4, #20]
 8002d94:	b002      	add	sp, #8
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	ab01      	add	r3, sp, #4
 8002d9a:	466a      	mov	r2, sp
 8002d9c:	f7ff ffca 	bl	8002d34 <__swhatbuf_r>
 8002da0:	9900      	ldr	r1, [sp, #0]
 8002da2:	4605      	mov	r5, r0
 8002da4:	4630      	mov	r0, r6
 8002da6:	f7ff fbc3 	bl	8002530 <_malloc_r>
 8002daa:	b948      	cbnz	r0, 8002dc0 <__smakebuf_r+0x44>
 8002dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002db0:	059a      	lsls	r2, r3, #22
 8002db2:	d4ef      	bmi.n	8002d94 <__smakebuf_r+0x18>
 8002db4:	f023 0303 	bic.w	r3, r3, #3
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	e7e3      	b.n	8002d88 <__smakebuf_r+0xc>
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <__smakebuf_r+0x7c>)
 8002dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	6020      	str	r0, [r4, #0]
 8002dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	9b00      	ldr	r3, [sp, #0]
 8002dd0:	6163      	str	r3, [r4, #20]
 8002dd2:	9b01      	ldr	r3, [sp, #4]
 8002dd4:	6120      	str	r0, [r4, #16]
 8002dd6:	b15b      	cbz	r3, 8002df0 <__smakebuf_r+0x74>
 8002dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ddc:	4630      	mov	r0, r6
 8002dde:	f000 fce3 	bl	80037a8 <_isatty_r>
 8002de2:	b128      	cbz	r0, 8002df0 <__smakebuf_r+0x74>
 8002de4:	89a3      	ldrh	r3, [r4, #12]
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	81a3      	strh	r3, [r4, #12]
 8002df0:	89a0      	ldrh	r0, [r4, #12]
 8002df2:	4305      	orrs	r5, r0
 8002df4:	81a5      	strh	r5, [r4, #12]
 8002df6:	e7cd      	b.n	8002d94 <__smakebuf_r+0x18>
 8002df8:	08002b69 	.word	0x08002b69

08002dfc <__malloc_lock>:
 8002dfc:	4801      	ldr	r0, [pc, #4]	; (8002e04 <__malloc_lock+0x8>)
 8002dfe:	f7ff bf97 	b.w	8002d30 <__retarget_lock_acquire_recursive>
 8002e02:	bf00      	nop
 8002e04:	200000e4 	.word	0x200000e4

08002e08 <__malloc_unlock>:
 8002e08:	4801      	ldr	r0, [pc, #4]	; (8002e10 <__malloc_unlock+0x8>)
 8002e0a:	f7ff bf92 	b.w	8002d32 <__retarget_lock_release_recursive>
 8002e0e:	bf00      	nop
 8002e10:	200000e4 	.word	0x200000e4

08002e14 <__ssputs_r>:
 8002e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e18:	688e      	ldr	r6, [r1, #8]
 8002e1a:	429e      	cmp	r6, r3
 8002e1c:	4682      	mov	sl, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	4690      	mov	r8, r2
 8002e22:	461f      	mov	r7, r3
 8002e24:	d838      	bhi.n	8002e98 <__ssputs_r+0x84>
 8002e26:	898a      	ldrh	r2, [r1, #12]
 8002e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e2c:	d032      	beq.n	8002e94 <__ssputs_r+0x80>
 8002e2e:	6825      	ldr	r5, [r4, #0]
 8002e30:	6909      	ldr	r1, [r1, #16]
 8002e32:	eba5 0901 	sub.w	r9, r5, r1
 8002e36:	6965      	ldr	r5, [r4, #20]
 8002e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e40:	3301      	adds	r3, #1
 8002e42:	444b      	add	r3, r9
 8002e44:	106d      	asrs	r5, r5, #1
 8002e46:	429d      	cmp	r5, r3
 8002e48:	bf38      	it	cc
 8002e4a:	461d      	movcc	r5, r3
 8002e4c:	0553      	lsls	r3, r2, #21
 8002e4e:	d531      	bpl.n	8002eb4 <__ssputs_r+0xa0>
 8002e50:	4629      	mov	r1, r5
 8002e52:	f7ff fb6d 	bl	8002530 <_malloc_r>
 8002e56:	4606      	mov	r6, r0
 8002e58:	b950      	cbnz	r0, 8002e70 <__ssputs_r+0x5c>
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	f8ca 3000 	str.w	r3, [sl]
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e66:	81a3      	strh	r3, [r4, #12]
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e70:	6921      	ldr	r1, [r4, #16]
 8002e72:	464a      	mov	r2, r9
 8002e74:	f000 fcba 	bl	80037ec <memcpy>
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e82:	81a3      	strh	r3, [r4, #12]
 8002e84:	6126      	str	r6, [r4, #16]
 8002e86:	6165      	str	r5, [r4, #20]
 8002e88:	444e      	add	r6, r9
 8002e8a:	eba5 0509 	sub.w	r5, r5, r9
 8002e8e:	6026      	str	r6, [r4, #0]
 8002e90:	60a5      	str	r5, [r4, #8]
 8002e92:	463e      	mov	r6, r7
 8002e94:	42be      	cmp	r6, r7
 8002e96:	d900      	bls.n	8002e9a <__ssputs_r+0x86>
 8002e98:	463e      	mov	r6, r7
 8002e9a:	4632      	mov	r2, r6
 8002e9c:	6820      	ldr	r0, [r4, #0]
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	f000 fcb2 	bl	8003808 <memmove>
 8002ea4:	68a3      	ldr	r3, [r4, #8]
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	1b9b      	subs	r3, r3, r6
 8002eaa:	4432      	add	r2, r6
 8002eac:	60a3      	str	r3, [r4, #8]
 8002eae:	6022      	str	r2, [r4, #0]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7db      	b.n	8002e6c <__ssputs_r+0x58>
 8002eb4:	462a      	mov	r2, r5
 8002eb6:	f000 fcc1 	bl	800383c <_realloc_r>
 8002eba:	4606      	mov	r6, r0
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d1e1      	bne.n	8002e84 <__ssputs_r+0x70>
 8002ec0:	6921      	ldr	r1, [r4, #16]
 8002ec2:	4650      	mov	r0, sl
 8002ec4:	f7ff fae4 	bl	8002490 <_free_r>
 8002ec8:	e7c7      	b.n	8002e5a <__ssputs_r+0x46>
	...

08002ecc <_svfiprintf_r>:
 8002ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed0:	4698      	mov	r8, r3
 8002ed2:	898b      	ldrh	r3, [r1, #12]
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	b09d      	sub	sp, #116	; 0x74
 8002ed8:	4607      	mov	r7, r0
 8002eda:	460d      	mov	r5, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	d50e      	bpl.n	8002efe <_svfiprintf_r+0x32>
 8002ee0:	690b      	ldr	r3, [r1, #16]
 8002ee2:	b963      	cbnz	r3, 8002efe <_svfiprintf_r+0x32>
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	f7ff fb23 	bl	8002530 <_malloc_r>
 8002eea:	6028      	str	r0, [r5, #0]
 8002eec:	6128      	str	r0, [r5, #16]
 8002eee:	b920      	cbnz	r0, 8002efa <_svfiprintf_r+0x2e>
 8002ef0:	230c      	movs	r3, #12
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	e0d1      	b.n	800309e <_svfiprintf_r+0x1d2>
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	616b      	str	r3, [r5, #20]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9309      	str	r3, [sp, #36]	; 0x24
 8002f02:	2320      	movs	r3, #32
 8002f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f0c:	2330      	movs	r3, #48	; 0x30
 8002f0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80030b8 <_svfiprintf_r+0x1ec>
 8002f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f16:	f04f 0901 	mov.w	r9, #1
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	469a      	mov	sl, r3
 8002f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f22:	b10a      	cbz	r2, 8002f28 <_svfiprintf_r+0x5c>
 8002f24:	2a25      	cmp	r2, #37	; 0x25
 8002f26:	d1f9      	bne.n	8002f1c <_svfiprintf_r+0x50>
 8002f28:	ebba 0b04 	subs.w	fp, sl, r4
 8002f2c:	d00b      	beq.n	8002f46 <_svfiprintf_r+0x7a>
 8002f2e:	465b      	mov	r3, fp
 8002f30:	4622      	mov	r2, r4
 8002f32:	4629      	mov	r1, r5
 8002f34:	4638      	mov	r0, r7
 8002f36:	f7ff ff6d 	bl	8002e14 <__ssputs_r>
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	f000 80aa 	beq.w	8003094 <_svfiprintf_r+0x1c8>
 8002f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f42:	445a      	add	r2, fp
 8002f44:	9209      	str	r2, [sp, #36]	; 0x24
 8002f46:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80a2 	beq.w	8003094 <_svfiprintf_r+0x1c8>
 8002f50:	2300      	movs	r3, #0
 8002f52:	f04f 32ff 	mov.w	r2, #4294967295
 8002f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f5a:	f10a 0a01 	add.w	sl, sl, #1
 8002f5e:	9304      	str	r3, [sp, #16]
 8002f60:	9307      	str	r3, [sp, #28]
 8002f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f66:	931a      	str	r3, [sp, #104]	; 0x68
 8002f68:	4654      	mov	r4, sl
 8002f6a:	2205      	movs	r2, #5
 8002f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f70:	4851      	ldr	r0, [pc, #324]	; (80030b8 <_svfiprintf_r+0x1ec>)
 8002f72:	f7fd f935 	bl	80001e0 <memchr>
 8002f76:	9a04      	ldr	r2, [sp, #16]
 8002f78:	b9d8      	cbnz	r0, 8002fb2 <_svfiprintf_r+0xe6>
 8002f7a:	06d0      	lsls	r0, r2, #27
 8002f7c:	bf44      	itt	mi
 8002f7e:	2320      	movmi	r3, #32
 8002f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f84:	0711      	lsls	r1, r2, #28
 8002f86:	bf44      	itt	mi
 8002f88:	232b      	movmi	r3, #43	; 0x2b
 8002f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f92:	2b2a      	cmp	r3, #42	; 0x2a
 8002f94:	d015      	beq.n	8002fc2 <_svfiprintf_r+0xf6>
 8002f96:	9a07      	ldr	r2, [sp, #28]
 8002f98:	4654      	mov	r4, sl
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f04f 0c0a 	mov.w	ip, #10
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fa6:	3b30      	subs	r3, #48	; 0x30
 8002fa8:	2b09      	cmp	r3, #9
 8002faa:	d94e      	bls.n	800304a <_svfiprintf_r+0x17e>
 8002fac:	b1b0      	cbz	r0, 8002fdc <_svfiprintf_r+0x110>
 8002fae:	9207      	str	r2, [sp, #28]
 8002fb0:	e014      	b.n	8002fdc <_svfiprintf_r+0x110>
 8002fb2:	eba0 0308 	sub.w	r3, r0, r8
 8002fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	9304      	str	r3, [sp, #16]
 8002fbe:	46a2      	mov	sl, r4
 8002fc0:	e7d2      	b.n	8002f68 <_svfiprintf_r+0x9c>
 8002fc2:	9b03      	ldr	r3, [sp, #12]
 8002fc4:	1d19      	adds	r1, r3, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	9103      	str	r1, [sp, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfbb      	ittet	lt
 8002fce:	425b      	neglt	r3, r3
 8002fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fd4:	9307      	strge	r3, [sp, #28]
 8002fd6:	9307      	strlt	r3, [sp, #28]
 8002fd8:	bfb8      	it	lt
 8002fda:	9204      	strlt	r2, [sp, #16]
 8002fdc:	7823      	ldrb	r3, [r4, #0]
 8002fde:	2b2e      	cmp	r3, #46	; 0x2e
 8002fe0:	d10c      	bne.n	8002ffc <_svfiprintf_r+0x130>
 8002fe2:	7863      	ldrb	r3, [r4, #1]
 8002fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe6:	d135      	bne.n	8003054 <_svfiprintf_r+0x188>
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	1d1a      	adds	r2, r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	9203      	str	r2, [sp, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bfb8      	it	lt
 8002ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ff8:	3402      	adds	r4, #2
 8002ffa:	9305      	str	r3, [sp, #20]
 8002ffc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030c8 <_svfiprintf_r+0x1fc>
 8003000:	7821      	ldrb	r1, [r4, #0]
 8003002:	2203      	movs	r2, #3
 8003004:	4650      	mov	r0, sl
 8003006:	f7fd f8eb 	bl	80001e0 <memchr>
 800300a:	b140      	cbz	r0, 800301e <_svfiprintf_r+0x152>
 800300c:	2340      	movs	r3, #64	; 0x40
 800300e:	eba0 000a 	sub.w	r0, r0, sl
 8003012:	fa03 f000 	lsl.w	r0, r3, r0
 8003016:	9b04      	ldr	r3, [sp, #16]
 8003018:	4303      	orrs	r3, r0
 800301a:	3401      	adds	r4, #1
 800301c:	9304      	str	r3, [sp, #16]
 800301e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003022:	4826      	ldr	r0, [pc, #152]	; (80030bc <_svfiprintf_r+0x1f0>)
 8003024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003028:	2206      	movs	r2, #6
 800302a:	f7fd f8d9 	bl	80001e0 <memchr>
 800302e:	2800      	cmp	r0, #0
 8003030:	d038      	beq.n	80030a4 <_svfiprintf_r+0x1d8>
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <_svfiprintf_r+0x1f4>)
 8003034:	bb1b      	cbnz	r3, 800307e <_svfiprintf_r+0x1b2>
 8003036:	9b03      	ldr	r3, [sp, #12]
 8003038:	3307      	adds	r3, #7
 800303a:	f023 0307 	bic.w	r3, r3, #7
 800303e:	3308      	adds	r3, #8
 8003040:	9303      	str	r3, [sp, #12]
 8003042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003044:	4433      	add	r3, r6
 8003046:	9309      	str	r3, [sp, #36]	; 0x24
 8003048:	e767      	b.n	8002f1a <_svfiprintf_r+0x4e>
 800304a:	fb0c 3202 	mla	r2, ip, r2, r3
 800304e:	460c      	mov	r4, r1
 8003050:	2001      	movs	r0, #1
 8003052:	e7a5      	b.n	8002fa0 <_svfiprintf_r+0xd4>
 8003054:	2300      	movs	r3, #0
 8003056:	3401      	adds	r4, #1
 8003058:	9305      	str	r3, [sp, #20]
 800305a:	4619      	mov	r1, r3
 800305c:	f04f 0c0a 	mov.w	ip, #10
 8003060:	4620      	mov	r0, r4
 8003062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003066:	3a30      	subs	r2, #48	; 0x30
 8003068:	2a09      	cmp	r2, #9
 800306a:	d903      	bls.n	8003074 <_svfiprintf_r+0x1a8>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0c5      	beq.n	8002ffc <_svfiprintf_r+0x130>
 8003070:	9105      	str	r1, [sp, #20]
 8003072:	e7c3      	b.n	8002ffc <_svfiprintf_r+0x130>
 8003074:	fb0c 2101 	mla	r1, ip, r1, r2
 8003078:	4604      	mov	r4, r0
 800307a:	2301      	movs	r3, #1
 800307c:	e7f0      	b.n	8003060 <_svfiprintf_r+0x194>
 800307e:	ab03      	add	r3, sp, #12
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	462a      	mov	r2, r5
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <_svfiprintf_r+0x1f8>)
 8003086:	a904      	add	r1, sp, #16
 8003088:	4638      	mov	r0, r7
 800308a:	f3af 8000 	nop.w
 800308e:	1c42      	adds	r2, r0, #1
 8003090:	4606      	mov	r6, r0
 8003092:	d1d6      	bne.n	8003042 <_svfiprintf_r+0x176>
 8003094:	89ab      	ldrh	r3, [r5, #12]
 8003096:	065b      	lsls	r3, r3, #25
 8003098:	f53f af2c 	bmi.w	8002ef4 <_svfiprintf_r+0x28>
 800309c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800309e:	b01d      	add	sp, #116	; 0x74
 80030a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a4:	ab03      	add	r3, sp, #12
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	462a      	mov	r2, r5
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <_svfiprintf_r+0x1f8>)
 80030ac:	a904      	add	r1, sp, #16
 80030ae:	4638      	mov	r0, r7
 80030b0:	f000 f9d4 	bl	800345c <_printf_i>
 80030b4:	e7eb      	b.n	800308e <_svfiprintf_r+0x1c2>
 80030b6:	bf00      	nop
 80030b8:	08003bb4 	.word	0x08003bb4
 80030bc:	08003bbe 	.word	0x08003bbe
 80030c0:	00000000 	.word	0x00000000
 80030c4:	08002e15 	.word	0x08002e15
 80030c8:	08003bba 	.word	0x08003bba

080030cc <__sfputc_r>:
 80030cc:	6893      	ldr	r3, [r2, #8]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	b410      	push	{r4}
 80030d4:	6093      	str	r3, [r2, #8]
 80030d6:	da08      	bge.n	80030ea <__sfputc_r+0x1e>
 80030d8:	6994      	ldr	r4, [r2, #24]
 80030da:	42a3      	cmp	r3, r4
 80030dc:	db01      	blt.n	80030e2 <__sfputc_r+0x16>
 80030de:	290a      	cmp	r1, #10
 80030e0:	d103      	bne.n	80030ea <__sfputc_r+0x1e>
 80030e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030e6:	f7ff bb7b 	b.w	80027e0 <__swbuf_r>
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	1c58      	adds	r0, r3, #1
 80030ee:	6010      	str	r0, [r2, #0]
 80030f0:	7019      	strb	r1, [r3, #0]
 80030f2:	4608      	mov	r0, r1
 80030f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <__sfputs_r>:
 80030fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fc:	4606      	mov	r6, r0
 80030fe:	460f      	mov	r7, r1
 8003100:	4614      	mov	r4, r2
 8003102:	18d5      	adds	r5, r2, r3
 8003104:	42ac      	cmp	r4, r5
 8003106:	d101      	bne.n	800310c <__sfputs_r+0x12>
 8003108:	2000      	movs	r0, #0
 800310a:	e007      	b.n	800311c <__sfputs_r+0x22>
 800310c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003110:	463a      	mov	r2, r7
 8003112:	4630      	mov	r0, r6
 8003114:	f7ff ffda 	bl	80030cc <__sfputc_r>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d1f3      	bne.n	8003104 <__sfputs_r+0xa>
 800311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003120 <_vfiprintf_r>:
 8003120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003124:	460d      	mov	r5, r1
 8003126:	b09d      	sub	sp, #116	; 0x74
 8003128:	4614      	mov	r4, r2
 800312a:	4698      	mov	r8, r3
 800312c:	4606      	mov	r6, r0
 800312e:	b118      	cbz	r0, 8003138 <_vfiprintf_r+0x18>
 8003130:	6983      	ldr	r3, [r0, #24]
 8003132:	b90b      	cbnz	r3, 8003138 <_vfiprintf_r+0x18>
 8003134:	f7ff fd4c 	bl	8002bd0 <__sinit>
 8003138:	4b89      	ldr	r3, [pc, #548]	; (8003360 <_vfiprintf_r+0x240>)
 800313a:	429d      	cmp	r5, r3
 800313c:	d11b      	bne.n	8003176 <_vfiprintf_r+0x56>
 800313e:	6875      	ldr	r5, [r6, #4]
 8003140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003142:	07d9      	lsls	r1, r3, #31
 8003144:	d405      	bmi.n	8003152 <_vfiprintf_r+0x32>
 8003146:	89ab      	ldrh	r3, [r5, #12]
 8003148:	059a      	lsls	r2, r3, #22
 800314a:	d402      	bmi.n	8003152 <_vfiprintf_r+0x32>
 800314c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800314e:	f7ff fdef 	bl	8002d30 <__retarget_lock_acquire_recursive>
 8003152:	89ab      	ldrh	r3, [r5, #12]
 8003154:	071b      	lsls	r3, r3, #28
 8003156:	d501      	bpl.n	800315c <_vfiprintf_r+0x3c>
 8003158:	692b      	ldr	r3, [r5, #16]
 800315a:	b9eb      	cbnz	r3, 8003198 <_vfiprintf_r+0x78>
 800315c:	4629      	mov	r1, r5
 800315e:	4630      	mov	r0, r6
 8003160:	f7ff fb90 	bl	8002884 <__swsetup_r>
 8003164:	b1c0      	cbz	r0, 8003198 <_vfiprintf_r+0x78>
 8003166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003168:	07dc      	lsls	r4, r3, #31
 800316a:	d50e      	bpl.n	800318a <_vfiprintf_r+0x6a>
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	b01d      	add	sp, #116	; 0x74
 8003172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003176:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <_vfiprintf_r+0x244>)
 8003178:	429d      	cmp	r5, r3
 800317a:	d101      	bne.n	8003180 <_vfiprintf_r+0x60>
 800317c:	68b5      	ldr	r5, [r6, #8]
 800317e:	e7df      	b.n	8003140 <_vfiprintf_r+0x20>
 8003180:	4b79      	ldr	r3, [pc, #484]	; (8003368 <_vfiprintf_r+0x248>)
 8003182:	429d      	cmp	r5, r3
 8003184:	bf08      	it	eq
 8003186:	68f5      	ldreq	r5, [r6, #12]
 8003188:	e7da      	b.n	8003140 <_vfiprintf_r+0x20>
 800318a:	89ab      	ldrh	r3, [r5, #12]
 800318c:	0598      	lsls	r0, r3, #22
 800318e:	d4ed      	bmi.n	800316c <_vfiprintf_r+0x4c>
 8003190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003192:	f7ff fdce 	bl	8002d32 <__retarget_lock_release_recursive>
 8003196:	e7e9      	b.n	800316c <_vfiprintf_r+0x4c>
 8003198:	2300      	movs	r3, #0
 800319a:	9309      	str	r3, [sp, #36]	; 0x24
 800319c:	2320      	movs	r3, #32
 800319e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80031a6:	2330      	movs	r3, #48	; 0x30
 80031a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800336c <_vfiprintf_r+0x24c>
 80031ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031b0:	f04f 0901 	mov.w	r9, #1
 80031b4:	4623      	mov	r3, r4
 80031b6:	469a      	mov	sl, r3
 80031b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031bc:	b10a      	cbz	r2, 80031c2 <_vfiprintf_r+0xa2>
 80031be:	2a25      	cmp	r2, #37	; 0x25
 80031c0:	d1f9      	bne.n	80031b6 <_vfiprintf_r+0x96>
 80031c2:	ebba 0b04 	subs.w	fp, sl, r4
 80031c6:	d00b      	beq.n	80031e0 <_vfiprintf_r+0xc0>
 80031c8:	465b      	mov	r3, fp
 80031ca:	4622      	mov	r2, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	4630      	mov	r0, r6
 80031d0:	f7ff ff93 	bl	80030fa <__sfputs_r>
 80031d4:	3001      	adds	r0, #1
 80031d6:	f000 80aa 	beq.w	800332e <_vfiprintf_r+0x20e>
 80031da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031dc:	445a      	add	r2, fp
 80031de:	9209      	str	r2, [sp, #36]	; 0x24
 80031e0:	f89a 3000 	ldrb.w	r3, [sl]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a2 	beq.w	800332e <_vfiprintf_r+0x20e>
 80031ea:	2300      	movs	r3, #0
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031f4:	f10a 0a01 	add.w	sl, sl, #1
 80031f8:	9304      	str	r3, [sp, #16]
 80031fa:	9307      	str	r3, [sp, #28]
 80031fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003200:	931a      	str	r3, [sp, #104]	; 0x68
 8003202:	4654      	mov	r4, sl
 8003204:	2205      	movs	r2, #5
 8003206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800320a:	4858      	ldr	r0, [pc, #352]	; (800336c <_vfiprintf_r+0x24c>)
 800320c:	f7fc ffe8 	bl	80001e0 <memchr>
 8003210:	9a04      	ldr	r2, [sp, #16]
 8003212:	b9d8      	cbnz	r0, 800324c <_vfiprintf_r+0x12c>
 8003214:	06d1      	lsls	r1, r2, #27
 8003216:	bf44      	itt	mi
 8003218:	2320      	movmi	r3, #32
 800321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800321e:	0713      	lsls	r3, r2, #28
 8003220:	bf44      	itt	mi
 8003222:	232b      	movmi	r3, #43	; 0x2b
 8003224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003228:	f89a 3000 	ldrb.w	r3, [sl]
 800322c:	2b2a      	cmp	r3, #42	; 0x2a
 800322e:	d015      	beq.n	800325c <_vfiprintf_r+0x13c>
 8003230:	9a07      	ldr	r2, [sp, #28]
 8003232:	4654      	mov	r4, sl
 8003234:	2000      	movs	r0, #0
 8003236:	f04f 0c0a 	mov.w	ip, #10
 800323a:	4621      	mov	r1, r4
 800323c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003240:	3b30      	subs	r3, #48	; 0x30
 8003242:	2b09      	cmp	r3, #9
 8003244:	d94e      	bls.n	80032e4 <_vfiprintf_r+0x1c4>
 8003246:	b1b0      	cbz	r0, 8003276 <_vfiprintf_r+0x156>
 8003248:	9207      	str	r2, [sp, #28]
 800324a:	e014      	b.n	8003276 <_vfiprintf_r+0x156>
 800324c:	eba0 0308 	sub.w	r3, r0, r8
 8003250:	fa09 f303 	lsl.w	r3, r9, r3
 8003254:	4313      	orrs	r3, r2
 8003256:	9304      	str	r3, [sp, #16]
 8003258:	46a2      	mov	sl, r4
 800325a:	e7d2      	b.n	8003202 <_vfiprintf_r+0xe2>
 800325c:	9b03      	ldr	r3, [sp, #12]
 800325e:	1d19      	adds	r1, r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	9103      	str	r1, [sp, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	bfbb      	ittet	lt
 8003268:	425b      	neglt	r3, r3
 800326a:	f042 0202 	orrlt.w	r2, r2, #2
 800326e:	9307      	strge	r3, [sp, #28]
 8003270:	9307      	strlt	r3, [sp, #28]
 8003272:	bfb8      	it	lt
 8003274:	9204      	strlt	r2, [sp, #16]
 8003276:	7823      	ldrb	r3, [r4, #0]
 8003278:	2b2e      	cmp	r3, #46	; 0x2e
 800327a:	d10c      	bne.n	8003296 <_vfiprintf_r+0x176>
 800327c:	7863      	ldrb	r3, [r4, #1]
 800327e:	2b2a      	cmp	r3, #42	; 0x2a
 8003280:	d135      	bne.n	80032ee <_vfiprintf_r+0x1ce>
 8003282:	9b03      	ldr	r3, [sp, #12]
 8003284:	1d1a      	adds	r2, r3, #4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	9203      	str	r2, [sp, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	bfb8      	it	lt
 800328e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003292:	3402      	adds	r4, #2
 8003294:	9305      	str	r3, [sp, #20]
 8003296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800337c <_vfiprintf_r+0x25c>
 800329a:	7821      	ldrb	r1, [r4, #0]
 800329c:	2203      	movs	r2, #3
 800329e:	4650      	mov	r0, sl
 80032a0:	f7fc ff9e 	bl	80001e0 <memchr>
 80032a4:	b140      	cbz	r0, 80032b8 <_vfiprintf_r+0x198>
 80032a6:	2340      	movs	r3, #64	; 0x40
 80032a8:	eba0 000a 	sub.w	r0, r0, sl
 80032ac:	fa03 f000 	lsl.w	r0, r3, r0
 80032b0:	9b04      	ldr	r3, [sp, #16]
 80032b2:	4303      	orrs	r3, r0
 80032b4:	3401      	adds	r4, #1
 80032b6:	9304      	str	r3, [sp, #16]
 80032b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032bc:	482c      	ldr	r0, [pc, #176]	; (8003370 <_vfiprintf_r+0x250>)
 80032be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032c2:	2206      	movs	r2, #6
 80032c4:	f7fc ff8c 	bl	80001e0 <memchr>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d03f      	beq.n	800334c <_vfiprintf_r+0x22c>
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <_vfiprintf_r+0x254>)
 80032ce:	bb1b      	cbnz	r3, 8003318 <_vfiprintf_r+0x1f8>
 80032d0:	9b03      	ldr	r3, [sp, #12]
 80032d2:	3307      	adds	r3, #7
 80032d4:	f023 0307 	bic.w	r3, r3, #7
 80032d8:	3308      	adds	r3, #8
 80032da:	9303      	str	r3, [sp, #12]
 80032dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032de:	443b      	add	r3, r7
 80032e0:	9309      	str	r3, [sp, #36]	; 0x24
 80032e2:	e767      	b.n	80031b4 <_vfiprintf_r+0x94>
 80032e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80032e8:	460c      	mov	r4, r1
 80032ea:	2001      	movs	r0, #1
 80032ec:	e7a5      	b.n	800323a <_vfiprintf_r+0x11a>
 80032ee:	2300      	movs	r3, #0
 80032f0:	3401      	adds	r4, #1
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f04f 0c0a 	mov.w	ip, #10
 80032fa:	4620      	mov	r0, r4
 80032fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003300:	3a30      	subs	r2, #48	; 0x30
 8003302:	2a09      	cmp	r2, #9
 8003304:	d903      	bls.n	800330e <_vfiprintf_r+0x1ee>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0c5      	beq.n	8003296 <_vfiprintf_r+0x176>
 800330a:	9105      	str	r1, [sp, #20]
 800330c:	e7c3      	b.n	8003296 <_vfiprintf_r+0x176>
 800330e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003312:	4604      	mov	r4, r0
 8003314:	2301      	movs	r3, #1
 8003316:	e7f0      	b.n	80032fa <_vfiprintf_r+0x1da>
 8003318:	ab03      	add	r3, sp, #12
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	462a      	mov	r2, r5
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <_vfiprintf_r+0x258>)
 8003320:	a904      	add	r1, sp, #16
 8003322:	4630      	mov	r0, r6
 8003324:	f3af 8000 	nop.w
 8003328:	4607      	mov	r7, r0
 800332a:	1c78      	adds	r0, r7, #1
 800332c:	d1d6      	bne.n	80032dc <_vfiprintf_r+0x1bc>
 800332e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003330:	07d9      	lsls	r1, r3, #31
 8003332:	d405      	bmi.n	8003340 <_vfiprintf_r+0x220>
 8003334:	89ab      	ldrh	r3, [r5, #12]
 8003336:	059a      	lsls	r2, r3, #22
 8003338:	d402      	bmi.n	8003340 <_vfiprintf_r+0x220>
 800333a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800333c:	f7ff fcf9 	bl	8002d32 <__retarget_lock_release_recursive>
 8003340:	89ab      	ldrh	r3, [r5, #12]
 8003342:	065b      	lsls	r3, r3, #25
 8003344:	f53f af12 	bmi.w	800316c <_vfiprintf_r+0x4c>
 8003348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800334a:	e711      	b.n	8003170 <_vfiprintf_r+0x50>
 800334c:	ab03      	add	r3, sp, #12
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	462a      	mov	r2, r5
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <_vfiprintf_r+0x258>)
 8003354:	a904      	add	r1, sp, #16
 8003356:	4630      	mov	r0, r6
 8003358:	f000 f880 	bl	800345c <_printf_i>
 800335c:	e7e4      	b.n	8003328 <_vfiprintf_r+0x208>
 800335e:	bf00      	nop
 8003360:	08003b74 	.word	0x08003b74
 8003364:	08003b94 	.word	0x08003b94
 8003368:	08003b54 	.word	0x08003b54
 800336c:	08003bb4 	.word	0x08003bb4
 8003370:	08003bbe 	.word	0x08003bbe
 8003374:	00000000 	.word	0x00000000
 8003378:	080030fb 	.word	0x080030fb
 800337c:	08003bba 	.word	0x08003bba

08003380 <_printf_common>:
 8003380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	4616      	mov	r6, r2
 8003386:	4699      	mov	r9, r3
 8003388:	688a      	ldr	r2, [r1, #8]
 800338a:	690b      	ldr	r3, [r1, #16]
 800338c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003390:	4293      	cmp	r3, r2
 8003392:	bfb8      	it	lt
 8003394:	4613      	movlt	r3, r2
 8003396:	6033      	str	r3, [r6, #0]
 8003398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800339c:	4607      	mov	r7, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	b10a      	cbz	r2, 80033a6 <_printf_common+0x26>
 80033a2:	3301      	adds	r3, #1
 80033a4:	6033      	str	r3, [r6, #0]
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	0699      	lsls	r1, r3, #26
 80033aa:	bf42      	ittt	mi
 80033ac:	6833      	ldrmi	r3, [r6, #0]
 80033ae:	3302      	addmi	r3, #2
 80033b0:	6033      	strmi	r3, [r6, #0]
 80033b2:	6825      	ldr	r5, [r4, #0]
 80033b4:	f015 0506 	ands.w	r5, r5, #6
 80033b8:	d106      	bne.n	80033c8 <_printf_common+0x48>
 80033ba:	f104 0a19 	add.w	sl, r4, #25
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	6832      	ldr	r2, [r6, #0]
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	42ab      	cmp	r3, r5
 80033c6:	dc26      	bgt.n	8003416 <_printf_common+0x96>
 80033c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033cc:	1e13      	subs	r3, r2, #0
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	bf18      	it	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	0692      	lsls	r2, r2, #26
 80033d6:	d42b      	bmi.n	8003430 <_printf_common+0xb0>
 80033d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033dc:	4649      	mov	r1, r9
 80033de:	4638      	mov	r0, r7
 80033e0:	47c0      	blx	r8
 80033e2:	3001      	adds	r0, #1
 80033e4:	d01e      	beq.n	8003424 <_printf_common+0xa4>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	68e5      	ldr	r5, [r4, #12]
 80033ea:	6832      	ldr	r2, [r6, #0]
 80033ec:	f003 0306 	and.w	r3, r3, #6
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	bf08      	it	eq
 80033f4:	1aad      	subeq	r5, r5, r2
 80033f6:	68a3      	ldr	r3, [r4, #8]
 80033f8:	6922      	ldr	r2, [r4, #16]
 80033fa:	bf0c      	ite	eq
 80033fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003400:	2500      	movne	r5, #0
 8003402:	4293      	cmp	r3, r2
 8003404:	bfc4      	itt	gt
 8003406:	1a9b      	subgt	r3, r3, r2
 8003408:	18ed      	addgt	r5, r5, r3
 800340a:	2600      	movs	r6, #0
 800340c:	341a      	adds	r4, #26
 800340e:	42b5      	cmp	r5, r6
 8003410:	d11a      	bne.n	8003448 <_printf_common+0xc8>
 8003412:	2000      	movs	r0, #0
 8003414:	e008      	b.n	8003428 <_printf_common+0xa8>
 8003416:	2301      	movs	r3, #1
 8003418:	4652      	mov	r2, sl
 800341a:	4649      	mov	r1, r9
 800341c:	4638      	mov	r0, r7
 800341e:	47c0      	blx	r8
 8003420:	3001      	adds	r0, #1
 8003422:	d103      	bne.n	800342c <_printf_common+0xac>
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800342c:	3501      	adds	r5, #1
 800342e:	e7c6      	b.n	80033be <_printf_common+0x3e>
 8003430:	18e1      	adds	r1, r4, r3
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	2030      	movs	r0, #48	; 0x30
 8003436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800343a:	4422      	add	r2, r4
 800343c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003444:	3302      	adds	r3, #2
 8003446:	e7c7      	b.n	80033d8 <_printf_common+0x58>
 8003448:	2301      	movs	r3, #1
 800344a:	4622      	mov	r2, r4
 800344c:	4649      	mov	r1, r9
 800344e:	4638      	mov	r0, r7
 8003450:	47c0      	blx	r8
 8003452:	3001      	adds	r0, #1
 8003454:	d0e6      	beq.n	8003424 <_printf_common+0xa4>
 8003456:	3601      	adds	r6, #1
 8003458:	e7d9      	b.n	800340e <_printf_common+0x8e>
	...

0800345c <_printf_i>:
 800345c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	460c      	mov	r4, r1
 8003462:	4691      	mov	r9, r2
 8003464:	7e27      	ldrb	r7, [r4, #24]
 8003466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003468:	2f78      	cmp	r7, #120	; 0x78
 800346a:	4680      	mov	r8, r0
 800346c:	469a      	mov	sl, r3
 800346e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003472:	d807      	bhi.n	8003484 <_printf_i+0x28>
 8003474:	2f62      	cmp	r7, #98	; 0x62
 8003476:	d80a      	bhi.n	800348e <_printf_i+0x32>
 8003478:	2f00      	cmp	r7, #0
 800347a:	f000 80d8 	beq.w	800362e <_printf_i+0x1d2>
 800347e:	2f58      	cmp	r7, #88	; 0x58
 8003480:	f000 80a3 	beq.w	80035ca <_printf_i+0x16e>
 8003484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800348c:	e03a      	b.n	8003504 <_printf_i+0xa8>
 800348e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003492:	2b15      	cmp	r3, #21
 8003494:	d8f6      	bhi.n	8003484 <_printf_i+0x28>
 8003496:	a001      	add	r0, pc, #4	; (adr r0, 800349c <_printf_i+0x40>)
 8003498:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	08003509 	.word	0x08003509
 80034a4:	08003485 	.word	0x08003485
 80034a8:	08003485 	.word	0x08003485
 80034ac:	08003485 	.word	0x08003485
 80034b0:	08003485 	.word	0x08003485
 80034b4:	08003509 	.word	0x08003509
 80034b8:	08003485 	.word	0x08003485
 80034bc:	08003485 	.word	0x08003485
 80034c0:	08003485 	.word	0x08003485
 80034c4:	08003485 	.word	0x08003485
 80034c8:	08003615 	.word	0x08003615
 80034cc:	08003539 	.word	0x08003539
 80034d0:	080035f7 	.word	0x080035f7
 80034d4:	08003485 	.word	0x08003485
 80034d8:	08003485 	.word	0x08003485
 80034dc:	08003637 	.word	0x08003637
 80034e0:	08003485 	.word	0x08003485
 80034e4:	08003539 	.word	0x08003539
 80034e8:	08003485 	.word	0x08003485
 80034ec:	08003485 	.word	0x08003485
 80034f0:	080035ff 	.word	0x080035ff
 80034f4:	680b      	ldr	r3, [r1, #0]
 80034f6:	1d1a      	adds	r2, r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	600a      	str	r2, [r1, #0]
 80034fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003504:	2301      	movs	r3, #1
 8003506:	e0a3      	b.n	8003650 <_printf_i+0x1f4>
 8003508:	6825      	ldr	r5, [r4, #0]
 800350a:	6808      	ldr	r0, [r1, #0]
 800350c:	062e      	lsls	r6, r5, #24
 800350e:	f100 0304 	add.w	r3, r0, #4
 8003512:	d50a      	bpl.n	800352a <_printf_i+0xce>
 8003514:	6805      	ldr	r5, [r0, #0]
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	2d00      	cmp	r5, #0
 800351a:	da03      	bge.n	8003524 <_printf_i+0xc8>
 800351c:	232d      	movs	r3, #45	; 0x2d
 800351e:	426d      	negs	r5, r5
 8003520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003524:	485e      	ldr	r0, [pc, #376]	; (80036a0 <_printf_i+0x244>)
 8003526:	230a      	movs	r3, #10
 8003528:	e019      	b.n	800355e <_printf_i+0x102>
 800352a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800352e:	6805      	ldr	r5, [r0, #0]
 8003530:	600b      	str	r3, [r1, #0]
 8003532:	bf18      	it	ne
 8003534:	b22d      	sxthne	r5, r5
 8003536:	e7ef      	b.n	8003518 <_printf_i+0xbc>
 8003538:	680b      	ldr	r3, [r1, #0]
 800353a:	6825      	ldr	r5, [r4, #0]
 800353c:	1d18      	adds	r0, r3, #4
 800353e:	6008      	str	r0, [r1, #0]
 8003540:	0628      	lsls	r0, r5, #24
 8003542:	d501      	bpl.n	8003548 <_printf_i+0xec>
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	e002      	b.n	800354e <_printf_i+0xf2>
 8003548:	0669      	lsls	r1, r5, #25
 800354a:	d5fb      	bpl.n	8003544 <_printf_i+0xe8>
 800354c:	881d      	ldrh	r5, [r3, #0]
 800354e:	4854      	ldr	r0, [pc, #336]	; (80036a0 <_printf_i+0x244>)
 8003550:	2f6f      	cmp	r7, #111	; 0x6f
 8003552:	bf0c      	ite	eq
 8003554:	2308      	moveq	r3, #8
 8003556:	230a      	movne	r3, #10
 8003558:	2100      	movs	r1, #0
 800355a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800355e:	6866      	ldr	r6, [r4, #4]
 8003560:	60a6      	str	r6, [r4, #8]
 8003562:	2e00      	cmp	r6, #0
 8003564:	bfa2      	ittt	ge
 8003566:	6821      	ldrge	r1, [r4, #0]
 8003568:	f021 0104 	bicge.w	r1, r1, #4
 800356c:	6021      	strge	r1, [r4, #0]
 800356e:	b90d      	cbnz	r5, 8003574 <_printf_i+0x118>
 8003570:	2e00      	cmp	r6, #0
 8003572:	d04d      	beq.n	8003610 <_printf_i+0x1b4>
 8003574:	4616      	mov	r6, r2
 8003576:	fbb5 f1f3 	udiv	r1, r5, r3
 800357a:	fb03 5711 	mls	r7, r3, r1, r5
 800357e:	5dc7      	ldrb	r7, [r0, r7]
 8003580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003584:	462f      	mov	r7, r5
 8003586:	42bb      	cmp	r3, r7
 8003588:	460d      	mov	r5, r1
 800358a:	d9f4      	bls.n	8003576 <_printf_i+0x11a>
 800358c:	2b08      	cmp	r3, #8
 800358e:	d10b      	bne.n	80035a8 <_printf_i+0x14c>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	07df      	lsls	r7, r3, #31
 8003594:	d508      	bpl.n	80035a8 <_printf_i+0x14c>
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	6861      	ldr	r1, [r4, #4]
 800359a:	4299      	cmp	r1, r3
 800359c:	bfde      	ittt	le
 800359e:	2330      	movle	r3, #48	; 0x30
 80035a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035a8:	1b92      	subs	r2, r2, r6
 80035aa:	6122      	str	r2, [r4, #16]
 80035ac:	f8cd a000 	str.w	sl, [sp]
 80035b0:	464b      	mov	r3, r9
 80035b2:	aa03      	add	r2, sp, #12
 80035b4:	4621      	mov	r1, r4
 80035b6:	4640      	mov	r0, r8
 80035b8:	f7ff fee2 	bl	8003380 <_printf_common>
 80035bc:	3001      	adds	r0, #1
 80035be:	d14c      	bne.n	800365a <_printf_i+0x1fe>
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	b004      	add	sp, #16
 80035c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ca:	4835      	ldr	r0, [pc, #212]	; (80036a0 <_printf_i+0x244>)
 80035cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	680e      	ldr	r6, [r1, #0]
 80035d4:	061f      	lsls	r7, r3, #24
 80035d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80035da:	600e      	str	r6, [r1, #0]
 80035dc:	d514      	bpl.n	8003608 <_printf_i+0x1ac>
 80035de:	07d9      	lsls	r1, r3, #31
 80035e0:	bf44      	itt	mi
 80035e2:	f043 0320 	orrmi.w	r3, r3, #32
 80035e6:	6023      	strmi	r3, [r4, #0]
 80035e8:	b91d      	cbnz	r5, 80035f2 <_printf_i+0x196>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	f023 0320 	bic.w	r3, r3, #32
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	2310      	movs	r3, #16
 80035f4:	e7b0      	b.n	8003558 <_printf_i+0xfc>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	f043 0320 	orr.w	r3, r3, #32
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	2378      	movs	r3, #120	; 0x78
 8003600:	4828      	ldr	r0, [pc, #160]	; (80036a4 <_printf_i+0x248>)
 8003602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003606:	e7e3      	b.n	80035d0 <_printf_i+0x174>
 8003608:	065e      	lsls	r6, r3, #25
 800360a:	bf48      	it	mi
 800360c:	b2ad      	uxthmi	r5, r5
 800360e:	e7e6      	b.n	80035de <_printf_i+0x182>
 8003610:	4616      	mov	r6, r2
 8003612:	e7bb      	b.n	800358c <_printf_i+0x130>
 8003614:	680b      	ldr	r3, [r1, #0]
 8003616:	6826      	ldr	r6, [r4, #0]
 8003618:	6960      	ldr	r0, [r4, #20]
 800361a:	1d1d      	adds	r5, r3, #4
 800361c:	600d      	str	r5, [r1, #0]
 800361e:	0635      	lsls	r5, r6, #24
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	d501      	bpl.n	8003628 <_printf_i+0x1cc>
 8003624:	6018      	str	r0, [r3, #0]
 8003626:	e002      	b.n	800362e <_printf_i+0x1d2>
 8003628:	0671      	lsls	r1, r6, #25
 800362a:	d5fb      	bpl.n	8003624 <_printf_i+0x1c8>
 800362c:	8018      	strh	r0, [r3, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	6123      	str	r3, [r4, #16]
 8003632:	4616      	mov	r6, r2
 8003634:	e7ba      	b.n	80035ac <_printf_i+0x150>
 8003636:	680b      	ldr	r3, [r1, #0]
 8003638:	1d1a      	adds	r2, r3, #4
 800363a:	600a      	str	r2, [r1, #0]
 800363c:	681e      	ldr	r6, [r3, #0]
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	2100      	movs	r1, #0
 8003642:	4630      	mov	r0, r6
 8003644:	f7fc fdcc 	bl	80001e0 <memchr>
 8003648:	b108      	cbz	r0, 800364e <_printf_i+0x1f2>
 800364a:	1b80      	subs	r0, r0, r6
 800364c:	6060      	str	r0, [r4, #4]
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	6123      	str	r3, [r4, #16]
 8003652:	2300      	movs	r3, #0
 8003654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003658:	e7a8      	b.n	80035ac <_printf_i+0x150>
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	4632      	mov	r2, r6
 800365e:	4649      	mov	r1, r9
 8003660:	4640      	mov	r0, r8
 8003662:	47d0      	blx	sl
 8003664:	3001      	adds	r0, #1
 8003666:	d0ab      	beq.n	80035c0 <_printf_i+0x164>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	079b      	lsls	r3, r3, #30
 800366c:	d413      	bmi.n	8003696 <_printf_i+0x23a>
 800366e:	68e0      	ldr	r0, [r4, #12]
 8003670:	9b03      	ldr	r3, [sp, #12]
 8003672:	4298      	cmp	r0, r3
 8003674:	bfb8      	it	lt
 8003676:	4618      	movlt	r0, r3
 8003678:	e7a4      	b.n	80035c4 <_printf_i+0x168>
 800367a:	2301      	movs	r3, #1
 800367c:	4632      	mov	r2, r6
 800367e:	4649      	mov	r1, r9
 8003680:	4640      	mov	r0, r8
 8003682:	47d0      	blx	sl
 8003684:	3001      	adds	r0, #1
 8003686:	d09b      	beq.n	80035c0 <_printf_i+0x164>
 8003688:	3501      	adds	r5, #1
 800368a:	68e3      	ldr	r3, [r4, #12]
 800368c:	9903      	ldr	r1, [sp, #12]
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	42ab      	cmp	r3, r5
 8003692:	dcf2      	bgt.n	800367a <_printf_i+0x21e>
 8003694:	e7eb      	b.n	800366e <_printf_i+0x212>
 8003696:	2500      	movs	r5, #0
 8003698:	f104 0619 	add.w	r6, r4, #25
 800369c:	e7f5      	b.n	800368a <_printf_i+0x22e>
 800369e:	bf00      	nop
 80036a0:	08003bc5 	.word	0x08003bc5
 80036a4:	08003bd6 	.word	0x08003bd6

080036a8 <__sread>:
 80036a8:	b510      	push	{r4, lr}
 80036aa:	460c      	mov	r4, r1
 80036ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b0:	f000 f8ea 	bl	8003888 <_read_r>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	bfab      	itete	ge
 80036b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036ba:	89a3      	ldrhlt	r3, [r4, #12]
 80036bc:	181b      	addge	r3, r3, r0
 80036be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036c2:	bfac      	ite	ge
 80036c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80036c6:	81a3      	strhlt	r3, [r4, #12]
 80036c8:	bd10      	pop	{r4, pc}

080036ca <__swrite>:
 80036ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ce:	461f      	mov	r7, r3
 80036d0:	898b      	ldrh	r3, [r1, #12]
 80036d2:	05db      	lsls	r3, r3, #23
 80036d4:	4605      	mov	r5, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	4616      	mov	r6, r2
 80036da:	d505      	bpl.n	80036e8 <__swrite+0x1e>
 80036dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e0:	2302      	movs	r3, #2
 80036e2:	2200      	movs	r2, #0
 80036e4:	f000 f870 	bl	80037c8 <_lseek_r>
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	4632      	mov	r2, r6
 80036f6:	463b      	mov	r3, r7
 80036f8:	4628      	mov	r0, r5
 80036fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fe:	f000 b817 	b.w	8003730 <_write_r>

08003702 <__sseek>:
 8003702:	b510      	push	{r4, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370a:	f000 f85d 	bl	80037c8 <_lseek_r>
 800370e:	1c43      	adds	r3, r0, #1
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	bf15      	itete	ne
 8003714:	6560      	strne	r0, [r4, #84]	; 0x54
 8003716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800371a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800371e:	81a3      	strheq	r3, [r4, #12]
 8003720:	bf18      	it	ne
 8003722:	81a3      	strhne	r3, [r4, #12]
 8003724:	bd10      	pop	{r4, pc}

08003726 <__sclose>:
 8003726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800372a:	f000 b81b 	b.w	8003764 <_close_r>
	...

08003730 <_write_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4d07      	ldr	r5, [pc, #28]	; (8003750 <_write_r+0x20>)
 8003734:	4604      	mov	r4, r0
 8003736:	4608      	mov	r0, r1
 8003738:	4611      	mov	r1, r2
 800373a:	2200      	movs	r2, #0
 800373c:	602a      	str	r2, [r5, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f7fd fb55 	bl	8000dee <_write>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_write_r+0x1e>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_write_r+0x1e>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	200000ec 	.word	0x200000ec

08003754 <abort>:
 8003754:	b508      	push	{r3, lr}
 8003756:	2006      	movs	r0, #6
 8003758:	f000 f8d0 	bl	80038fc <raise>
 800375c:	2001      	movs	r0, #1
 800375e:	f7fd fb1f 	bl	8000da0 <_exit>
	...

08003764 <_close_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4d06      	ldr	r5, [pc, #24]	; (8003780 <_close_r+0x1c>)
 8003768:	2300      	movs	r3, #0
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fd fb59 	bl	8000e26 <_close>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_close_r+0x1a>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_close_r+0x1a>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	200000ec 	.word	0x200000ec

08003784 <_fstat_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4d07      	ldr	r5, [pc, #28]	; (80037a4 <_fstat_r+0x20>)
 8003788:	2300      	movs	r3, #0
 800378a:	4604      	mov	r4, r0
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	602b      	str	r3, [r5, #0]
 8003792:	f7fd fb54 	bl	8000e3e <_fstat>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	d102      	bne.n	80037a0 <_fstat_r+0x1c>
 800379a:	682b      	ldr	r3, [r5, #0]
 800379c:	b103      	cbz	r3, 80037a0 <_fstat_r+0x1c>
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	bd38      	pop	{r3, r4, r5, pc}
 80037a2:	bf00      	nop
 80037a4:	200000ec 	.word	0x200000ec

080037a8 <_isatty_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4d06      	ldr	r5, [pc, #24]	; (80037c4 <_isatty_r+0x1c>)
 80037ac:	2300      	movs	r3, #0
 80037ae:	4604      	mov	r4, r0
 80037b0:	4608      	mov	r0, r1
 80037b2:	602b      	str	r3, [r5, #0]
 80037b4:	f7fd fb53 	bl	8000e5e <_isatty>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d102      	bne.n	80037c2 <_isatty_r+0x1a>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	b103      	cbz	r3, 80037c2 <_isatty_r+0x1a>
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	200000ec 	.word	0x200000ec

080037c8 <_lseek_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4d07      	ldr	r5, [pc, #28]	; (80037e8 <_lseek_r+0x20>)
 80037cc:	4604      	mov	r4, r0
 80037ce:	4608      	mov	r0, r1
 80037d0:	4611      	mov	r1, r2
 80037d2:	2200      	movs	r2, #0
 80037d4:	602a      	str	r2, [r5, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f7fd fb4c 	bl	8000e74 <_lseek>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	d102      	bne.n	80037e6 <_lseek_r+0x1e>
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	b103      	cbz	r3, 80037e6 <_lseek_r+0x1e>
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	bd38      	pop	{r3, r4, r5, pc}
 80037e8:	200000ec 	.word	0x200000ec

080037ec <memcpy>:
 80037ec:	440a      	add	r2, r1
 80037ee:	4291      	cmp	r1, r2
 80037f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f4:	d100      	bne.n	80037f8 <memcpy+0xc>
 80037f6:	4770      	bx	lr
 80037f8:	b510      	push	{r4, lr}
 80037fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003802:	4291      	cmp	r1, r2
 8003804:	d1f9      	bne.n	80037fa <memcpy+0xe>
 8003806:	bd10      	pop	{r4, pc}

08003808 <memmove>:
 8003808:	4288      	cmp	r0, r1
 800380a:	b510      	push	{r4, lr}
 800380c:	eb01 0402 	add.w	r4, r1, r2
 8003810:	d902      	bls.n	8003818 <memmove+0x10>
 8003812:	4284      	cmp	r4, r0
 8003814:	4623      	mov	r3, r4
 8003816:	d807      	bhi.n	8003828 <memmove+0x20>
 8003818:	1e43      	subs	r3, r0, #1
 800381a:	42a1      	cmp	r1, r4
 800381c:	d008      	beq.n	8003830 <memmove+0x28>
 800381e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003826:	e7f8      	b.n	800381a <memmove+0x12>
 8003828:	4402      	add	r2, r0
 800382a:	4601      	mov	r1, r0
 800382c:	428a      	cmp	r2, r1
 800382e:	d100      	bne.n	8003832 <memmove+0x2a>
 8003830:	bd10      	pop	{r4, pc}
 8003832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800383a:	e7f7      	b.n	800382c <memmove+0x24>

0800383c <_realloc_r>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	4607      	mov	r7, r0
 8003840:	4614      	mov	r4, r2
 8003842:	460e      	mov	r6, r1
 8003844:	b921      	cbnz	r1, 8003850 <_realloc_r+0x14>
 8003846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800384a:	4611      	mov	r1, r2
 800384c:	f7fe be70 	b.w	8002530 <_malloc_r>
 8003850:	b922      	cbnz	r2, 800385c <_realloc_r+0x20>
 8003852:	f7fe fe1d 	bl	8002490 <_free_r>
 8003856:	4625      	mov	r5, r4
 8003858:	4628      	mov	r0, r5
 800385a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800385c:	f000 f86a 	bl	8003934 <_malloc_usable_size_r>
 8003860:	42a0      	cmp	r0, r4
 8003862:	d20f      	bcs.n	8003884 <_realloc_r+0x48>
 8003864:	4621      	mov	r1, r4
 8003866:	4638      	mov	r0, r7
 8003868:	f7fe fe62 	bl	8002530 <_malloc_r>
 800386c:	4605      	mov	r5, r0
 800386e:	2800      	cmp	r0, #0
 8003870:	d0f2      	beq.n	8003858 <_realloc_r+0x1c>
 8003872:	4631      	mov	r1, r6
 8003874:	4622      	mov	r2, r4
 8003876:	f7ff ffb9 	bl	80037ec <memcpy>
 800387a:	4631      	mov	r1, r6
 800387c:	4638      	mov	r0, r7
 800387e:	f7fe fe07 	bl	8002490 <_free_r>
 8003882:	e7e9      	b.n	8003858 <_realloc_r+0x1c>
 8003884:	4635      	mov	r5, r6
 8003886:	e7e7      	b.n	8003858 <_realloc_r+0x1c>

08003888 <_read_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4d07      	ldr	r5, [pc, #28]	; (80038a8 <_read_r+0x20>)
 800388c:	4604      	mov	r4, r0
 800388e:	4608      	mov	r0, r1
 8003890:	4611      	mov	r1, r2
 8003892:	2200      	movs	r2, #0
 8003894:	602a      	str	r2, [r5, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f7fd fa8c 	bl	8000db4 <_read>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d102      	bne.n	80038a6 <_read_r+0x1e>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	b103      	cbz	r3, 80038a6 <_read_r+0x1e>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	200000ec 	.word	0x200000ec

080038ac <_raise_r>:
 80038ac:	291f      	cmp	r1, #31
 80038ae:	b538      	push	{r3, r4, r5, lr}
 80038b0:	4604      	mov	r4, r0
 80038b2:	460d      	mov	r5, r1
 80038b4:	d904      	bls.n	80038c0 <_raise_r+0x14>
 80038b6:	2316      	movs	r3, #22
 80038b8:	6003      	str	r3, [r0, #0]
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80038c2:	b112      	cbz	r2, 80038ca <_raise_r+0x1e>
 80038c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80038c8:	b94b      	cbnz	r3, 80038de <_raise_r+0x32>
 80038ca:	4620      	mov	r0, r4
 80038cc:	f000 f830 	bl	8003930 <_getpid_r>
 80038d0:	462a      	mov	r2, r5
 80038d2:	4601      	mov	r1, r0
 80038d4:	4620      	mov	r0, r4
 80038d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038da:	f000 b817 	b.w	800390c <_kill_r>
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d00a      	beq.n	80038f8 <_raise_r+0x4c>
 80038e2:	1c59      	adds	r1, r3, #1
 80038e4:	d103      	bne.n	80038ee <_raise_r+0x42>
 80038e6:	2316      	movs	r3, #22
 80038e8:	6003      	str	r3, [r0, #0]
 80038ea:	2001      	movs	r0, #1
 80038ec:	e7e7      	b.n	80038be <_raise_r+0x12>
 80038ee:	2400      	movs	r4, #0
 80038f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80038f4:	4628      	mov	r0, r5
 80038f6:	4798      	blx	r3
 80038f8:	2000      	movs	r0, #0
 80038fa:	e7e0      	b.n	80038be <_raise_r+0x12>

080038fc <raise>:
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <raise+0xc>)
 80038fe:	4601      	mov	r1, r0
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f7ff bfd3 	b.w	80038ac <_raise_r>
 8003906:	bf00      	nop
 8003908:	2000000c 	.word	0x2000000c

0800390c <_kill_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d07      	ldr	r5, [pc, #28]	; (800392c <_kill_r+0x20>)
 8003910:	2300      	movs	r3, #0
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	f7fd fa31 	bl	8000d80 <_kill>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d102      	bne.n	8003928 <_kill_r+0x1c>
 8003922:	682b      	ldr	r3, [r5, #0]
 8003924:	b103      	cbz	r3, 8003928 <_kill_r+0x1c>
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	bd38      	pop	{r3, r4, r5, pc}
 800392a:	bf00      	nop
 800392c:	200000ec 	.word	0x200000ec

08003930 <_getpid_r>:
 8003930:	f7fd ba1e 	b.w	8000d70 <_getpid>

08003934 <_malloc_usable_size_r>:
 8003934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003938:	1f18      	subs	r0, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfbc      	itt	lt
 800393e:	580b      	ldrlt	r3, [r1, r0]
 8003940:	18c0      	addlt	r0, r0, r3
 8003942:	4770      	bx	lr

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
